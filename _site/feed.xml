<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-01T10:38:13+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SpookyDKs projects</title><subtitle>Blog for all my projects that need it</subtitle><author><name>Esben JÃ¸rgensen</name></author><entry><title type="html">INNHABIT Network Overview</title><link href="http://localhost:4000/blog/2025/05/26/innhabit-network.html" rel="alternate" type="text/html" title="INNHABIT Network Overview" /><published>2025-05-26T00:00:00+02:00</published><updated>2025-05-26T00:00:00+02:00</updated><id>http://localhost:4000/blog/2025/05/26/innhabit-network</id><content type="html" xml:base="http://localhost:4000/blog/2025/05/26/innhabit-network.html"><![CDATA[<h1 id="what-is-innhabit">What is INNHABIT</h1>
<p>INNHABIT is an Entry-Exit-Tracking system, monitoring every entrance at AAU INNOVATE via Computer Vision, then sending Entry/Exit events to a Central Aggregation Server.
<img src="/assets/SystemDiagramAlternate.png" alt="SystemOverview" style="width:100%;" /></p>
<blockquote>
  <h4 id="goal-of-networking-for-innhabit"><strong>Goal of Networking for INNHABIT</strong></h4>
  <ul>
    <li>Send Entry/Exit events from Jetson to Aggregation Server</li>
    <li>Store Entry/Exit events for further analysis</li>
    <li>Update setting on Jetson remotely from Aggregation Server</li>
    <li>Serve a Web Dashboard for detailed statics</li>
    <li>Serve focused statics to existing digital signage</li>
  </ul>
</blockquote>

<h1 id="jetson-internal-architecture">Jetson Internal architecture</h1>
<p>The software of the Jetson implement multiple threads each having a class and task assigned.<br />
A simplifyed thread description and diagram can be seen below:<br />
<img src="/assets/ThreadDiagram.png" alt="SystemOverview" style="width:100%;" />
The figure shows all main threads and the shared resourses between them.
The main program flow is a follows</p>
<blockquote>
  <ul>
    <li><strong>FrameCapturer Thread</strong> Captures frames from camera and adds them to <em>frameQueue</em></li>
    <li><strong>Detection Thread</strong> Takes frames from <strong>frameQueue</strong>, runs ML and tracking, calls <strong>Api Handler Thread</strong> if Entry/Exit is detected. Adds image with detection and tracking to <strong>displayQueue</strong>, runs ML and tracking, calls <strong>Api Hander Thread</strong> if Entry/Exit is detected. Adds image with detection and tracking to <strong>displayQueue</strong>.</li>
    <li><strong>Display Thread</strong> Takes frames from <strong>displayQueue</strong> and dispays them to either an attached monitor, x11 forwarding session, or RTSP stream.</li>
    <li><strong>DevicePoller Thread</strong> uses <strong>Api Handler Thread</strong> to poll <strong>Aggregation server</strong> for updated settings</li>
    <li><strong>Api Handler Thread</strong> handles all network communication, takes request/events from a queue, ensuring no event is skipped cause of other events stalling.</li>
  </ul>

</blockquote>

<h3 id="sending-entryexit-events">Sending Entry/Exit events</h3>
<p>An Entry/Exit event is sent everytime it is detected that a person has entered or exited.
The sending of these event is handled by a dedicated thread <em>ApiHandler</em>.<br />
The flow of such and event can be seen below:
<img src="/assets/network_person_event_diagram.png" alt="SystemOverview" style="width:100%;" />
The Jetsons installed are only be connected to via Wi-Fi. This makes deployment more flexible and reduces installation costs.<br />
The Jetsons are connected to a <em>Word-Wide-Web</em> connected network, seperate from <em>eduroam</em>. Bypassing alot of issues caused by the security system around <em>eduroam</em>. The Jetsons uploads Entry/Exit events via HTTP<em>s</em> to the Aggregation server hosted with the <em>DNS</em> adress <em>INNHABIT.dk</em>.
The Jetsons uses <em>libcurl</em> for sending HTTP<em>s</em> PUT request to <em>INNHABIT</em> at designted <em>API</em> endpoints.</p>
<h2 id="api-endpoints-for-jetson"><strong>API endpoints for Jetson</strong></h2>
<p><img src="/assets/EndpointDiagram.png" alt="API" style="width:100%;" /></p>

<p>For handling the all <em>API</em> events the Jetsons software has a dedicated thread and class <em>ApiHandler</em>.
<em>ApiHandler</em> works of a queue of <em>API</em> events ensuring no events are missed or stalls the system.
<em>libcurl</em> is designed to simplify the integration of HTTP<em>s</em>, and the code for contruction and sending a HTTP<em>s</em> request with JSON body is seen below.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ApiHandler:sendPostRequest
</span>
<span class="n">json</span> <span class="n">ApiHandler</span><span class="o">::</span><span class="n">sendPostRequest</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">endpoint</span><span class="p">,</span> <span class="k">const</span> <span class="n">json</span><span class="o">&amp;</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">curl_slist</span><span class="o">*</span> <span class="n">headers</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">"Content-Type: application/json"</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">auth_header</span> <span class="o">=</span> <span class="s">"Authorization: Bearer "</span> <span class="o">+</span> <span class="n">api_key_</span><span class="p">;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">auth_header</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">full_url</span> <span class="o">=</span> <span class="n">base_url_</span> <span class="o">+</span> <span class="n">endpoint</span><span class="p">;</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="n">full_url</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">data_str</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="n">data_str</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="n">headers</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">response</span><span class="p">;</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_WRITEFUNCTION</span><span class="p">,</span> <span class="n">writeCallback</span><span class="p">);</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">response</span><span class="p">);</span>

    <span class="kt">long</span> <span class="n">http_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">CURLcode</span> <span class="n">res</span> <span class="o">=</span> <span class="n">curl_easy_perform</span><span class="p">(</span><span class="n">curl_</span><span class="p">);</span>
    <span class="n">curl_easy_getinfo</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLINFO_RESPONSE_CODE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">http_code</span><span class="p">);</span>

    <span class="n">json</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">CURLE_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">http_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="n">http_code</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">is_discarded</span><span class="p">())</span> <span class="p">{</span>
                    <span class="n">ERROR</span><span class="p">(</span><span class="s">"Failed to parse response as JSON"</span><span class="p">);</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">json</span><span class="o">::</span><span class="n">parse_error</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ERROR</span><span class="p">(</span><span class="s">"Parse error: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
                <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ERROR</span><span class="p">(</span><span class="s">"HTTP error: "</span> <span class="o">&lt;&lt;</span> <span class="n">http_code</span> <span class="o">&lt;&lt;</span> <span class="s">" - Response: "</span> <span class="o">&lt;&lt;</span> <span class="n">response</span><span class="p">);</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
            <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">ERROR</span><span class="p">(</span><span class="s">"CURL error: "</span> <span class="o">&lt;&lt;</span> <span class="n">curl_easy_strerror</span><span class="p">(</span><span class="n">res</span><span class="p">));</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
        <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">curl_slist_free_all</span><span class="p">(</span><span class="n">headers</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The HTTP request contructed from this example looks something like:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> <span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">events</span><span class="o">/</span><span class="n">entries</span><span class="o">/</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">Host</span><span class="o">:</span> <span class="n">innhabit</span><span class="p">.</span><span class="n">dk</span>
<span class="n">Authorization</span><span class="o">:</span> <span class="n">Bearer</span> <span class="o">&lt;</span><span class="n">GoodEncryptedKeyForSpecificEntrance</span><span class="o">&gt;</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="o">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>

<span class="p">{</span>
  <span class="s">"timestamp"</span><span class="o">:</span> <span class="s">"2025-05-29T12:34:56Z"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With a HTTP POST request sent to the server, what then happens when itâs recieved?</p>
<h1 id="aggregation-server">Aggregation Server</h1>
<p>The internal architecture is run inside a <a href="https://www.docker.com/"><strong>Docker</strong></a> network with multiple containers handling different parts of the system.<br />
The <em>Docker</em> network can be seen below: <em>All arrows a bi-directional</em>
<img src="/assets/DockerDiagram.png" alt="SystemOverview" style="width:100%;" />
As can be seen on the image above, the <em>Docker</em> network consists of 4 containers described below:</p>
<h3 id="nginx">NGINX</h3>
<p><a href="https://nginx.org/"><strong>NGINX</strong></a> can be seen as the front end of the system, being the only container able of direct communication with clients.
INGINX servers client with all static resourses such as HTML and Images, thenpasses request to Gunicorn if any logic needs to be handles, such as permissions or dynamically updating charts.</p>
<h3 id="gunicorn--django">Gunicorn / Django</h3>
<p>Gunicorn is where the brain of the Webserver is hosted, Gunicorn hosts a Django Webserver and then handles communication between IGINX and Django.
Django then handles database communication and all dynamic content on the Webserver.
Some of the dynamic sites is mainly the admindashboard and insights page seen below:<br />
<img src="/assets/admindashboard.png" alt="Dashboard" style="width:100%;" />
<img src="/assets/insights.png" alt="Insight" style="width:49%;" />
<img src="/assets/PublicInsight.png" alt="Insight" style="width:49%;" /></p>
<h3 id="postgresql">PostgreSQL</h3>
<p>PostgreSQL is the database used for storing all the Entry/Exit events, it is hosted in its own docker container for easy integration, and communicates with Gunicorn. The database is contructed with Multiple tables which can be seen on the Figure Below:<br />
<img src="/assets/innhabit-db.png" alt="DataBase" style="width:100%;" /></p>

<h3 id="valkey">Valkey</h3>
<p>Valkey is a key/value datastore used to store password API keys, valued for its security and easy integration with Django and Gunicorn.
The API keys generated, as shown in the figure below, consist of an easy-to-read identifier, a prefix to distinguish the key, and a secret 64-character long key that is randomly generated. This randomness is why salting is not necessary.
<img src="/assets/APISections.png" alt="APIKey" style="width:100%;" /></p>]]></content><author><name>Esben JÃ¸rgensen</name></author><category term="blog" /><summary type="html"><![CDATA[What is INNHABIT INNHABIT is an Entry-Exit-Tracking system, monitoring every entrance at AAU INNOVATE via Computer Vision, then sending Entry/Exit events to a Central Aggregation Server. Goal of Networking for INNHABIT Send Entry/Exit events from Jetson to Aggregation Server Store Entry/Exit events for further analysis Update setting on Jetson remotely from Aggregation Server Serve a Web Dashboard for detailed statics Serve focused statics to existing digital signage Jetson Internal architecture The software of the Jetson implement multiple threads each having a class and task assigned. A simplifyed thread description and diagram can be seen below: The figure shows all main threads and the shared resourses between them. The main program flow is a follows FrameCapturer Thread Captures frames from camera and adds them to frameQueue Detection Thread Takes frames from frameQueue, runs ML and tracking, calls Api Handler Thread if Entry/Exit is detected. Adds image with detection and tracking to displayQueue, runs ML and tracking, calls Api Hander Thread if Entry/Exit is detected. Adds image with detection and tracking to displayQueue. Display Thread Takes frames from displayQueue and dispays them to either an attached monitor, x11 forwarding session, or RTSP stream. DevicePoller Thread uses Api Handler Thread to poll Aggregation server for updated settings Api Handler Thread handles all network communication, takes request/events from a queue, ensuring no event is skipped cause of other events stalling.]]></summary></entry><entry><title type="html">Sipeed Maix Dock M1W</title><link href="http://localhost:4000/blog/2025/05/24/setup.html" rel="alternate" type="text/html" title="Sipeed Maix Dock M1W" /><published>2025-05-24T00:00:00+02:00</published><updated>2025-05-24T00:00:00+02:00</updated><id>http://localhost:4000/blog/2025/05/24/setup</id><content type="html" xml:base="http://localhost:4000/blog/2025/05/24/setup.html"><![CDATA[<h1 id="what-is-the-maix-dock-m1w">What is the Maix Dock M1W?</h1>
<p><img src="/assets/Maix-dock.jpg" alt="Maix Dock M1W" style="width:60%;" /></p>

<p>The Maix Dock M1W is a small RISC-V based Micro-controller, with the main point of interest being the integrated NPU called KPU. 
The board is based around the Kendryte K210 chip, which comes with 2 64bit RICS-V cores clocked at 400MHz and a dedicated NPU. 
The NPU is marketed with the ability to perform 1TOPS at INT8 precision.<br />
This makes the M1W an interresting product for low-power object detection.</p>

<p>The specifictions for the M1W is as follows:<br />
<em>With ESP32-WROOM for comparision</em></p>

<table>
    <tr>
        <th>Item</th>
        <th>M1W / K210</th>
        <th>ESP32</th>
    </tr>
    <tr>
    <td>CPU:</td>
        <td>
            <p>Dual-core 64bit risc-v / 400MHz</p>
            <p> (double-precision FPU integration)</p>
        </td>
        <td>Dual-core 32bit Xtensa LX6 / 240MHz</td>
    </tr>
    <tr>
        <td>Memory:</td>
        <td> 8Mib 64bit on-chip SRAM </td>
        <td> 520Kib 32bit on-chip SRAM</td>
    </tr>
    <tr>
        <td>NPU / KPU:</td>
        <td> 1TOPS of INT8 multiplication</td>
        <td> No NPU</td>
    </tr>
    <tr>
        <td>Storage:</td>
        <td>16MiB Flash, support micro SDXC expansion storage (max 128GB)</td>
        <td>16MiB Flash</td>
    </tr>
    <tr>
        <td> WIFI: </td>
        <td> MaixDock (M1W) uses M1W (integrated ESP8285 2.4GHz WIFI SOC)</td>
        <td> ESP32 comes with integrated 2.4GHz WIFI</td>
    </tr>
    <tr>
        <td> Screen (package): </td>
        <td> 2.4 inch TFT, screen resolution: 320*240</td>
        <td> Depends on kit</td>
    </tr>
    <tr>
        <td> Camera (package):</td>
        <td> 30W pixel GC0328 camera </td>
        <td> Depends on kit</td>
    </tr>
    <tr>
        <td> TF card slot:</td>
        <td> Multimedia resource expansion, support large-capacity storage</td>
        <td> Depends on kit</td>
    </tr>
</table>

<h1 id="m1w-unboxing">M1W Unboxing</h1>
<p>I ordered the M1W from Aliexpress and it arrived in a small cardboard box with a plastic enclosure containing: the M1W itself, the 2.4 inch screen, a small camera already attached, an antenna and a USB-C  to Micro-b adapter.<br />
<img src="/assets/M1W-unbloxed.png" alt="Platic enclosure" style="width:100%;" /></p>
<h1 id="m1w-initial-power-on">M1W Initial Power On</h1>
<p>An inital power on of the M1W originally showed a welcome MaixDuino welcome message on the display, but when trying to recreate it for a picture the display only shows white</p>

<p><img src="/assets/M1W-White.png" alt="Platic enclosure" style="width:100%;" /></p>
<h1 id="programming-on-the-m1w">Programming on the M1W</h1>
<p>When trying to find guides for the M1W especially for programming low-level C code, most links from official sources are either on chinese or points to non existent pages. 
However, Platformio has the M1W-board listed as <em>sipeed-maix-one-dock</em>, and is compatible with the arduino framework.<br />
So for an easy test I wrote a simple script making the builtin led blink.  SUCCESS!!!<br />
The <em>platformio.ini</em> and <em>main.cpp</em> code can be seen below</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#platformio.ini</span>

    <span class="p">[</span><span class="n">env</span><span class="ss">:sipeed</span><span class="o">-</span><span class="n">maixduino</span><span class="p">]</span>
    <span class="n">platform</span> <span class="o">=</span> <span class="n">kendryte210</span>
    <span class="n">board</span> <span class="o">=</span> <span class="n">sipeed</span><span class="o">-</span><span class="n">maix</span><span class="o">-</span><span class="n">one</span><span class="o">-</span><span class="n">dock</span>
    <span class="n">framework</span> <span class="o">=</span> <span class="n">arduino</span>
    <span class="n">upload_speed</span> <span class="o">=</span> <span class="mi">115200</span>
    <span class="n">monitor_speed</span> <span class="o">=</span> <span class="mi">115200</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#main.cpp
</span>
    <span class="cp">#include</span> <span class="cpf">&lt;Arduino.h&gt;</span><span class="cp">
</span>
    <span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">)</span> <span class="p">{}</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Starting LED blink"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Blink!"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<h1 id="serial-communication-with-m1w">Serial communication with M1W</h1>
<p>Serial communication is crucial when trying to debug anything on Micro-controllers, so to make sure Serial communication is working properly I added the <em>Serial.println(âBlink!â);</em> to the previous code. This however did not work out of the box, when trying to monitor the serial connection via <em>platformio device monitor</em> nothing would show up, and the LED would stop blinking?.<br />
After doing some research I found that the M1W possibly was entering boot/ISP mode, as if i was trying to flash new software to it.
This was easily fixed by disabling DTR and RTS by adding <em>monitor_rts = 0</em> and <em>monitor_dtr = 0</em> to <em>platformio.ini</em></p>
<h1 id="k210-vs-esp32-cpu-performance">K210 vs ESP32 CPU Performance</h1>
<p>The K210s CPU is clocked alot higher than that of the ESP32, so I was curios about what the performance difference could be?<br />
Especially with the K210 supporting <em>FP64</em> and having a much larger amount of builtin SRAM. 
For a quick benchmarking of the boards I did a simple and mostly theoretical benchmark, measuring the time it took to do 10
million addtions, multiplications and divisions, for <em>INT64</em> <em>Float32</em> and <em>Float64</em>, on a single core, then converting the results to million operations per second. Results can be seen below, where the K210 is on average 2.5x faster compared to the ESP32.<br />
<img src="/assets/K210vESP32-mops.svg" alt="Benchmark" style="width:100%;" />
With the K210 having FP64 implemented in hardware, and the ESP32 relying on software, it is disappointing to see that the FP64 performance isnât much greater than that of the ESP32. This benchmark only focuses on raw performance that isnât touching the IO.</p>
<h1 id="k210-vs-esp32-memory-performance">K210 vs ESP32 Memory Performance</h1>
<p>With the CPU performance of the K210 being impressive but still disappointing, I wanted to know how big a difference the larger SRAM capacity could have on performance.
The speed of both read and write was tested by allocating a certain buffer size and written and reading from it.</p>

<p><img src="/assets/K210vsESP32ReadWrite.svg" alt="Benchmarkmemory" style="width:100%;" /><br />
As can been seen on the image above, the K210 outperforms the ESP32 by a wide margin, with write speeds being consistent up to over 5MB, were the ESP32 falls of after 110KB, because everything over that requires the ESP32 to use external RAM.</p>
<h1 id="memory-impact-on-performance">Memory Impact on Performance</h1>
<p>The K210 has a much more fast memory to use, whick makes sense with the point of being able to do live image processing, requiring multiple frames to be kept in memory while processing. To measure the difference when running simple image manipulation tasks, square images between 128-1250 was allocated, filled with a gradiant and downscaled to quarter size. Excution times can be improved by using dedicated libraries and not relying on standard Arduino SDK.</p>

<p><img src="/assets/K210vESP32img.svg" alt="Benchmarkimg" style="width:100%;" /></p>
<h1 id="development-with-kendryte-standalone-sdk">Development with Kendryte-standalone-sdk</h1>
<p>To <em>Arduino framework</em> doesnât have access to all the feature of the M1W, to get this the Kendryte-standalone-sdk is needed.
The sdk is used by default when initing a platformio project for the M1W, and the sdk can be found on github <a href="https://github.com/kendryte/kendryte-standalone-sdk/tree/develop">SDK Github Page</a> with some documentation here <a href="https://loboris.eu/sipeed/kendryte_standalone_programming_guide_v0.3.0.zh-CN.en.pdf">Documentation</a>.
Most funcitons seems documented, and a simple hello world example is included in the <em>src/</em> folder.
Running the program writes <em>âhello worldâ</em> from both cores, with output looking like this.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Core</span> <span class="mi">0</span> <span class="n">Hello</span> <span class="n">world</span>
<span class="n">Core</span> <span class="mi">1</span> <span class="n">Hello</span> <span class="n">world</span>
</code></pre></div></div>
<p>Now that the <em>Arduino framework</em> is no longer used, the program is written in standard c, and printin via serial is a simple as:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bsp.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sysctl.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Esben JÃ¸rgensen</name></author><category term="blog" /><summary type="html"><![CDATA[What is the Maix Dock M1W?]]></summary></entry></feed>