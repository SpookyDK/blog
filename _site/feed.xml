<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-14T14:57:43+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SpookyDKs projects</title><subtitle>Blog for all my projects that need it</subtitle><author><name>Esben J√∏rgensen</name></author><entry><title type="html">Linear Algebra Example</title><link href="http://localhost:4000/2025/06/06/linear-algebra-example.html" rel="alternate" type="text/html" title="Linear Algebra Example" /><published>2025-06-06T00:00:00+02:00</published><updated>2025-06-06T00:00:00+02:00</updated><id>http://localhost:4000/2025/06/06/linear-algebra-example</id><content type="html" xml:base="http://localhost:4000/2025/06/06/linear-algebra-example.html"><![CDATA[<hr />
<p>layout: post
title: ‚ÄúLinear Algebra Example‚Äù
date: 2025-06-10
categories: [blog]
‚Äî</p>

<h1 id="-line√¶r-algebra--eksamen-2025">üìò Line√¶r Algebra ‚Äì Eksamen 2025</h1>

<h2 id="1-hvordan-multiplicerer-man-to-matricer-hvilke-st√∏rrelser-skal-de-to-matricer-a-og-b-have-s√•-at-deres-produkt-ab-er-defineret-lille-eksempel-p√•-det-fx-32-matrix-gange-to-dimensionelt-vektor">1. Hvordan multiplicerer man to matricer? Hvilke st√∏rrelser skal de to matricer A og B have, s√• at deres produkt AB er defineret? Lille eksempel p√• det, fx 3√ó2-matrix gange to-dimensionelt vektor.</h2>

<p>To matricer</p>

\[A \in \mathbb{R}^{m \times n} \quad \text{og} \quad B \in \mathbb{R}^{n \times p}\]

<p>kan multipliceres, hvis <strong>antallet af s√∏jler i $A$</strong> er lig med <strong>antallet af r√¶kker i $B$</strong>. Produktet</p>

\[AB \in \mathbb{R}^{m \times p}\]

<p>bliver da en matrix i $\mathbb{R}^{m \times p}$.</p>

<p><strong>Eksempel:</strong></p>

\[A = \begin{bmatrix} 1 &amp; 2 \\ 3 &amp; 4 \\ 5 &amp; 6 \end{bmatrix}, \quad
x = \begin{bmatrix} 7 \\ 8 \end{bmatrix}
\Rightarrow
Ax = \begin{bmatrix} 1\cdot7 + 2\cdot8 \\ 3\cdot7 + 4\cdot8 \\ 5\cdot7 + 6\cdot8 \end{bmatrix} = \begin{bmatrix} 23 \\ 53 \\ 83 \end{bmatrix}\]

<hr />

<h2 id="2-g√¶lder-altid-ab--ba-hvis-a-og-b-begge-er-nn-matricer-nej-oftest-ikke">2. G√¶lder altid AB = BA, hvis A og B begge er n√ón-matricer? (Nej, oftest ikke!)</h2>

<p>Nej, matrixmultiplikation er <strong>ikke kommutativ</strong>. Dvs. generelt g√¶lder:</p>

\[AB \neq BA\]

<p><strong>Undtagelser:</strong> Det kan dog g√¶lde, hvis:</p>
<ul>
  <li>( A = I ) (identitetsmatrix)</li>
  <li>( A ) og ( B ) er diagonale og kommuterer</li>
  <li>( A ) og ( B ) er potenser af samme matrix</li>
</ul>

<hr />

<h2 id="3-hvad-sker-n√•r-man-ganger-matricen-a-fra-venstre-eller-h√∏jre-med-identitetsmatricen-i-af-den-tilpasse-st√∏rrelse-ingenting-man-f√•r-bare-igen-a">3. Hvad sker, n√•r man ganger matricen A fra venstre eller h√∏jre med identitetsmatricen I af den tilpasse st√∏rrelse? (Ingenting, man f√•r bare igen A.)</h2>

<p>Hvis 
\(A = \mathbb{R}^{m \times n} \quad \text{og} \quad I\)
har passende st√∏rrelse, s√• g√¶lder:
\(IA = A \quad \text{og} \quad AI = A\)</p>

<hr />

<h2 id="4-hvor-mange-l√∏sninger-kan-et-line√¶rt-ligningssystem-ax--b-i-princippet-have">4. Hvor mange l√∏sninger kan et line√¶rt ligningssystem Ax = b i princippet have?</h2>

<p>Et line√¶rt system kan have:</p>
<ul>
  <li><strong>Ingen l√∏sning</strong> (inkonsistent)</li>
  <li><strong>√ân entydig l√∏sning</strong></li>
  <li><strong>Uendeligt mange l√∏sninger</strong></li>
</ul>

<hr />

<h2 id="5-hvordan-kan-man-unders√∏ge-om-ax--b-har-l√∏sninger-og-i-givet-fald-finde-dem">5. Hvordan kan man unders√∏ge, om Ax = b har l√∏sninger og i givet fald finde dem?</h2>

<p>Brug <strong>Gauss-elimination</strong> til at omskrive systemet til trappeform.</p>

<ul>
  <li>Tjek om systemet er <strong>konsistent</strong></li>
  <li>Brug <strong>tilbageinds√¶ttelse</strong> for at finde l√∏sninger, hvis systemet har l√∏sninger</li>
</ul>

<hr />

<h2 id="6-hvad-er-totalmatricen-tilknyttet-ax--b">6. Hvad er totalmatricen tilknyttet Ax = b?</h2>

<p>Den <strong>totalmatricen</strong> er matrixen dannet ved at s√¶tte h√∏jresiden $b$ sammen med koefficientmatrixen $A$:</p>

\[[A \mid b]\]

<hr />

<h2 id="7-hvilke-element√¶re-r√¶kkeoperationer-kender-du">7. Hvilke element√¶re r√¶kkeoperationer kender du?</h2>

<ol>
  <li>Ombytning af to r√¶kker</li>
  <li>Multiplikation af en r√¶kke med en ikke-nul konstant</li>
  <li>L√¶gge en multiplum af √©n r√¶kke til en anden</li>
</ol>

<hr />

<h2 id="8-hvad-er-en-trappeform-og-hvad-er-specielt-ved-en-reduceret-trappeform">8. Hvad er en trappeform og hvad er specielt ved en reduceret trappeform?</h2>

<p><strong>Trappeform:</strong></p>
<ul>
  <li>Alle nuller√¶kker nederst</li>
  <li>F√∏rste ikke-nul element i en r√¶kke (pivot) er l√¶ngere til h√∏jre end i r√¶kken ovenfor</li>
  <li>Pivotelementet er ofte 1</li>
</ul>

<p><strong>Reduceret trappeform:</strong></p>
<ul>
  <li>Alle pivotelementer er 1</li>
  <li>Alle andre elementer i pivot-s√∏jlerne er 0</li>
</ul>

<hr />

<h2 id="9-hvordan-kan-man-afl√¶se-fra-en-trappeform-af-totalmatricen-om-systemet-er-l√∏seligt-eller-ej-og-hvor-mange-l√∏sninger-man-har-hvis-systemet-er-l√∏seligt-hvordan-kan-man-se-om-en-variable-er-fri-hvordan-kan-man-bestemme-l√∏sninger-ud-fra-en-trappeform-hvis-systemet-er-konsistent">9. Hvordan kan man afl√¶se fra en trappeform af totalmatricen, om systemet er l√∏seligt eller ej, og hvor mange l√∏sninger man har hvis systemet er l√∏seligt? Hvordan kan man se, om en variable er fri? Hvordan kan man bestemme l√∏sninger ud fra en trappeform, hvis systemet er konsistent?</h2>

<ul>
  <li>Hvis der er en r√¶kke som $0 = d$, hvor $d \neq 0$: <strong>ingen l√∏sning</strong></li>
  <li>Hvis antallet af pivot-s√∏jler $&lt;$ antal variable: <strong>fri variable</strong></li>
  <li>Brug <strong>tilbageinds√¶ttelse</strong> til at finde l√∏sninger</li>
</ul>

<hr />

<h2 id="10-kan-du-bringe-f√∏lgende-totalmatrix-p√•-trappeform">10. Kan du bringe f√∏lgende totalmatrix p√• trappeform?</h2>

\[\left[\begin{array}{ccccc}
-1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\
1 &amp; 3 &amp; 1 &amp; 1 &amp; 0 \\
0 &amp; -1 &amp; 2 &amp; 1 &amp; 1
\end{array}\right]\]

<p><strong>L√∏sning (Gauss-elimination):</strong></p>

<ol>
  <li>Byt r√¶kke 1 og 2</li>
  <li>Brug r√¶kke 1 til at eliminere elementet i r√¶kke 2</li>
  <li>Forts√¶t til trappeform</li>
</ol>

<p>Resultatet (trappeform):</p>

\[\left[\begin{array}{ccccc}
1 &amp; 3 &amp; 1 &amp; 1 &amp; 0 \\
0 &amp; 5 &amp; 4 &amp; 5 &amp; 5 \\
0 &amp; 0 &amp; \dots &amp; \dots &amp; \dots
\end{array}\right]\]

<hr />

<h2 id="11-hvad-betyder-det-at-en-matrix-er-p√•-reduceret-trappeform">11. Hvad betyder det, at en matrix er p√• reduceret trappeform?</h2>

<p>En matrix er i <strong>reduceret trappeform</strong>, hvis:</p>

<ul>
  <li>Den er i trappeform</li>
  <li>Alle <strong>pivotelementer</strong> (f√∏rste ikke-nul elementer i hver r√¶kke) er 1</li>
  <li>Alle <strong>andre elementer i pivot-s√∏jlen</strong> er 0</li>
</ul>

<p>Det g√∏r det nemt at afl√¶se l√∏sninger direkte.</p>

<hr />

<h2 id="12-hvordan-kan-man-l√∏se-ax--b-vha-reduceret-trappeform">12. Hvordan kan man l√∏se Ax = b vha. reduceret trappeform?</h2>

<ol>
  <li>S√¶t den <strong>totalmatricen</strong> op: $[A \mid b]$</li>
  <li>Brug <strong>Gauss-Jordan elimination</strong> for at opn√• <strong>reduceret trappeform</strong></li>
  <li>Afl√¶s l√∏sningen:
    <ul>
      <li>Hvis systemet er entydigt l√∏st: √©n l√∏sning</li>
      <li>Hvis fri variable: uendelig mange l√∏sninger, skriv som parameterudtryk</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="13-hvor-mange-l√∏sninger-har-systemet-ax--0">13. Hvor mange l√∏sninger har systemet Ax = 0?</h2>

<p>Systemet $Ax = 0$ har altid <strong>mindst √©n l√∏sning</strong>: den trivielle $x = 0$</p>

<p>Antal l√∏sninger afh√¶nger af <strong>rangen</strong>:</p>
<ul>
  <li>Hvis rang $A = n$: kun triviel l√∏sning</li>
  <li>Hvis rang $A &lt; n$: uendelig mange l√∏sninger</li>
</ul>

<hr />

<h2 id="14-hvorn√•r-har-systemet-ax--0-kun-den-trivielle-l√∏sning">14. Hvorn√•r har systemet Ax = 0 kun den trivielle l√∏sning?</h2>
<p>Hvis matrix $A \in \mathbb{R}^{m \times n}$ har <strong>fuld s√∏jlerang</strong>, alts√• $\text{rang}(A) = n$, s√• har systemet kun l√∏sningen:</p>

\[x = 0\]

<hr />

<h2 id="15-hvordan-defineres-rangen-af-en-matrix">15. Hvordan defineres rangen af en matrix?</h2>

<p><strong>Rangen</strong> af en matrix $A$ er <strong>antallet af line√¶rt uafh√¶ngige r√¶kker (eller s√∏jler)</strong>.</p>

<p>= antallet af <strong>pivot-elementer</strong> i trappeformen</p>

<hr />

<h2 id="16-hvad-siger-s√¶tningen-om-rang-og-l√∏sning-af-systemet-ax--b">16. Hvad siger s√¶tningen om rang og l√∏sning af systemet $Ax = b$?</h2>

<p>Systemet $Ax = b$ er <strong>l√∏seligt</strong> hvis og kun hvis:</p>

\[\text{rang}(A) = \text{rang}([A \mid b])\]

<p>Hvis l√∏sningen findes, og $\text{rang}(A) = n$: entydig l√∏sning<br />
Hvis $\text{rang}(A) &lt; n$: uendeligt mange l√∏sninger</p>

<hr />

<h2 id="17-giv-eksempler-p√•-vektorer-i-mathbbrn">17. Giv eksempler p√• vektorer i $\mathbb{R}^n$</h2>

<p>Eksempel p√• en vektor i $\mathbb{R}^3$:</p>

\[v = \begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}\]

<p>Det er blot en kolonne med 3 reelle tal.</p>

<hr />

<h2 id="18-hvordan-defineres-line√¶r-kombination-af-vektorer">18. Hvordan defineres line√¶r kombination af vektorer?</h2>

<p>En <strong>line√¶r kombination</strong> af vektorer $v_1, v_2, \dots, v_k \in \mathbb{R}^n$ er:</p>

\[a_1 v_1 + a_2 v_2 + \dots + a_k v_k\]

<p>hvor $a_i \in \mathbb{R}$</p>

<hr />

<h2 id="19-hvorn√•r-siges-en-m√¶ngde-af-vektorer-at-v√¶re-line√¶rt-afh√¶ngigeuafh√¶ngige">19. Hvorn√•r siges en m√¶ngde af vektorer at v√¶re line√¶rt afh√¶ngige/uafh√¶ngige?</h2>

<ul>
  <li><strong>Afh√¶ngige:</strong> En vektor kan skrives som line√¶r kombination af de andre</li>
  <li><strong>Uafh√¶ngige:</strong> Ingen vektor kan skrives som line√¶r kombination af de andre</li>
</ul>

<p>Formelt:<br />
\(a_1 v_1 + \dots + a_k v_k = 0 \quad \Rightarrow \quad a_1 = \dots = a_k = 0\)</p>

<hr />
<h2 id="20-hvad-er-s√∏jlerummet-for-en-matrix">20. Hvad er s√∏jlerummet for en matrix?</h2>

<p><strong>S√∏jlerummet</strong> (column space) for matrix $A \in \mathbb{R}^{m \times n}$ er:</p>

\[\text{Col}(A) = \{ Ax \mid x \in \mathbb{R}^n \} \subseteq \mathbb{R}^m\]

<p>= m√¶ngden af alle line√¶re kombinationer af s√∏jlerne i $A$</p>

<h2 id="21-hvordan-udregner-man-determinanter-af-22-og-33-matricer">21. Hvordan udregner man determinanter af 2√ó2 og 3√ó3-matricer?</h2>

<ul>
  <li><strong>2√ó2 matrix:</strong></li>
</ul>

\[\det\begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix} = ad - bc\]

<ul>
  <li><strong>3√ó3 matrix:</strong></li>
</ul>

<p>Brug sarrus-reglen eller kofaktorudvikling:</p>

\[\det\begin{bmatrix}
a &amp; b &amp; c \\
d &amp; e &amp; f \\
g &amp; h &amp; i
\end{bmatrix}
= aei + bfg + cdh - ceg - bdi - afh\]

<hr />

<h2 id="22-hvad-betyder-kofaktorudvidelse">22. Hvad betyder kofaktorudvidelse?</h2>

<p>Kofaktorudvidelse (Laplace-udvikling) betyder at bestemme determinanten af en matrix ved at:</p>

<ul>
  <li>Udvikle langs en r√¶kke eller s√∏jle:</li>
</ul>

\[\det(A) = \sum_{j=1}^{n} (-1)^{i+j} a_{ij} \cdot \det(A_{ij})\]

<p>hvor $A_{ij}$ er undermatricen uden r√¶kke $i$ og s√∏jle $j$.</p>

<hr />

<h2 id="23-hvad-sker-med-deta-n√•r-man-bytter-to-r√¶kker-eller-s√∏jler">23. Hvad sker med $\det(A)$, n√•r man bytter to r√¶kker eller s√∏jler?</h2>

<ul>
  <li>N√•r man bytter to <strong>r√¶kker</strong> eller <strong>s√∏jler</strong> i $A$, s√• √¶ndrer determinanten <strong>fortegn</strong>:</li>
</ul>

\[\det(\text{byttet } A) = -\det(A)\]

<hr />

<h2 id="24-hvad-sker-med-deta-n√•r-man-l√¶gger-et-multiplum-af-√©n-r√¶kke-til-en-anden">24. Hvad sker med $\det(A)$, n√•r man l√¶gger et multiplum af √©n r√¶kke til en anden?</h2>

<ul>
  <li>Determinanten <strong>√¶ndrer ikke v√¶rdi</strong>:</li>
</ul>

\[\det(A) = \det(A + \lambda \cdot \text{anden r√¶kke})\]

<p>G√¶lder ogs√• for s√∏jler.</p>

<hr />

<h2 id="25-hvad-g√¶lder-for-determinanter-under-transponering-og-multiplikation">25. Hvad g√¶lder for determinanter under transponering og multiplikation?</h2>

<ul>
  <li>
\[\det(A^T) = \det(A)\]
  </li>
  <li>
\[\det(AB) = \det(A) \cdot \det(B)\]
  </li>
</ul>

<hr />

<h2 id="26-hvis-a-er-inverterbar-hvad-er-deta-1">26. Hvis $A$ er inverterbar, hvad er $\det(A^{-1})$?</h2>

\[\det(A^{-1}) = \frac{1}{\det(A)}\]

<p>Fordi:</p>

\[\det(I) = \det(A A^{-1}) = \det(A) \cdot \det(A^{-1}) = 1\]

<hr />

<h2 id="27-antag-at-s-er-symmetrisk-og-inverterbar-vis-at-s-1-ogs√•-er-symmetrisk">27. Antag at $S$ er symmetrisk og inverterbar. Vis at $S^{-1}$ ogs√• er symmetrisk.</h2>

<p>Hvis $S = S^T$, og $S$ er inverterbar:</p>

<ul>
  <li>Tag transponatet:</li>
</ul>

\[(S^{-1})^T = (S^T)^{-1} = S^{-1}\]

<ul>
  <li>Alts√•: $S^{-1} = (S^{-1})^T$, dvs. <strong>symmetrisk</strong></li>
</ul>

<hr />

<h2 id="28-hvad-er-en-ortogonal-matrix-u">28. Hvad er en ortogonal matrix $U$?</h2>

<p>En kvadratisk matrix $U$ er <strong>ortogonal</strong>, hvis:</p>

\[U^{-1} = U^T \quad \text{eller} \quad U^T U = I\]

<p>Det betyder, at s√∏jlerne i $U$ er <strong>ortonormale</strong>.</p>

<hr />

<h2 id="29-er-produktet-u_1-u_2-af-to-ortogonale-matricer-igen-ortogonal">29. Er produktet $U_1 U_2$ af to ortogonale matricer igen ortogonal?</h2>

<p>Ja!</p>

<ul>
  <li>Hvis $U_1$ og $U_2$ er ortogonale:</li>
</ul>

\[(U_1 U_2)^T (U_1 U_2) = U_2^T U_1^T U_1 U_2 = U_2^T I U_2 = U_2^T U_2 = I\]

<p>Alts√• er $U_1 U_2$ ortogonal.</p>

<hr />

<h2 id="30-hvad-forst√•r-vi-ved-en-linearkombination-af-vektorerne-v_1--v_k">30. Hvad forst√•r vi ved en linearkombination af vektorerne $v_1, ‚Ä¶, v_k$?</h2>

<p>En <strong>linearkombination</strong> af vektorer $v_1, ‚Ä¶, v_k$ er:</p>

\[a_1 v_1 + a_2 v_2 + \dots + a_k v_k
\quad \text{hvor } a_i \in \mathbb{R}\]

<p>Det er en m√•de at danne nye vektorer ud fra givne vektorer.</p>

<h2 id="31-hvad-er-textspanv_1-dots-v_k">31. Hvad er $\text{span}{v_1, \dots, v_k}$?</h2>

<p>Det er m√¶ngden af alle linearkombinationer af $v_1, \dots, v_k$:</p>

\[\text{span}\{v_1, \dots, v_k\} = \left\{ \sum_{i=1}^k a_i v_i \mid a_i \in \mathbb{R} \right\}\]

<p>Span er alts√• et underrum best√•ende af alle vektorer, man kan danne ved linearkombination.</p>

<hr />

<h2 id="32-hvorn√•r-siger-vi-at-vektorerne-v_1-dots-v_k-er-line√¶rt-uafh√¶ngige">32. Hvorn√•r siger vi, at vektorerne $v_1, \dots, v_k$ er line√¶rt uafh√¶ngige?</h2>

<p>De er line√¶rt uafh√¶ngige, hvis:</p>

\[c_1 v_1 + \dots + c_k v_k = 0 \Rightarrow c_1 = \dots = c_k = 0\]

<p>Dvs. den eneste linearkombination, der giver nulvektoren, er den trivielle.</p>

<hr />

<h2 id="33-hvad-er-et-underrum-v-subseteq-mathbbrn">33. Hvad er et underrum $V \subseteq \mathbb{R}^n$?</h2>

<p>Et underrum $V$ er en delm√¶ngde af $\mathbb{R}^n$, som opfylder:</p>

<ul>
  <li>$0 \in V$</li>
  <li>Lukket under addition: $u, v \in V \Rightarrow u + v \in V$</li>
  <li>Lukket under skalering: $c \in \mathbb{R}, v \in V \Rightarrow c \cdot v \in V$</li>
</ul>

<hr />

<h2 id="34-hvad-er-nulrummet-til-en-givet-matrix-a">34. Hvad er nulrummet til en givet matrix $A$?</h2>

<p>Nulrummet er m√¶ngden af l√∏sninger til $Ax = 0$:</p>

\[\text{Nul}(A) = \{ x \in \mathbb{R}^n \mid Ax = 0 \}\]

<p>Det er et underrum af $\mathbb{R}^n$.</p>

<hr />

<h2 id="35-hvad-er-s√∏jlerummet-til-en-givet-matrix-a">35. Hvad er s√∏jlerummet til en givet matrix $A$?</h2>

<p>S√∏jlerummet er m√¶ngden af alle linearkombinationer af s√∏jlerne i $A$:</p>

\[\text{Col}(A) = \text{span}\{\text{s√∏jlerne i } A\}\]

<p>Det er et underrum af $\mathbb{R}^m$, hvor $A$ er $m \times n$.</p>

<hr />

<h2 id="36-hvad-er-rang-af-en-matrix">36. Hvad er rang af en matrix?</h2>

<p>Rangen af $A$ er dimensionen af s√∏jlerummet:</p>

\[\text{rang}(A) = \dim(\text{Col}(A))\]

<p>Det er ogs√• antal ledende 1-taller i en reduceret trappeform.</p>

<hr />

<h2 id="37-hvad-er-en-basis-af-et-underrum-v-subseteq-mathbbrn">37. Hvad er en basis af et underrum $V \subseteq \mathbb{R}^n$?</h2>

<p>En basis er en m√¶ngde vektorer:</p>

<ul>
  <li>Som <strong>sp√¶nder over</strong> $V$</li>
  <li>Som er <strong>line√¶rt uafh√¶ngige</strong></li>
</ul>

\[\text{Basis } \Rightarrow \text{minimalt s√¶t, der genererer } V\]

<hr />

<h2 id="38-hvad-kan-man-sige-om-s√∏jlerne-i-en-inverterbar-n-times-n-matrix">38. Hvad kan man sige om s√∏jlerne i en inverterbar $n \times n$-matrix?</h2>

<p>De danner en basis for $\mathbb{R}^n$:</p>

\[A \text{ inverterbar } \Leftrightarrow \text{s√∏jlerne i } A \text{ er line√¶rt uafh√¶ngige og sp√¶nder over } \mathbb{R}^n\]

<hr />

<h2 id="39-hvorn√•r-er-to-vektorer-v-og-w-ortogonale">39. Hvorn√•r er to vektorer $v$ og $w$ ortogonale?</h2>

<p>Hvis deres indre produkt er 0:</p>

\[v \cdot w = 0 \Rightarrow v \perp w\]

<hr />

<h2 id="40-hvad-er-formlen-for-den-ortogonale-projektion-af-x-p√•-textspanv_1-dots-v_k-hvis-de-er-ortogonale">40. Hvad er formlen for den ortogonale projektion af (x) p√• (\text{span}{v_1, \dots, v_k}), hvis de er ortogonale?</h2>

<p>Projektionen (P x) er givet ved:</p>

\[P x = \sum_{j=1}^k \frac{v_j \cdot x}{v_j \cdot v_j} v_j\]

<p>G√¶lder kun hvis (v_j)‚Äòerne er parvist ortogonale (ortogonal m√¶ngde).</p>

<h2 id="41-hvad-er-en-ortonormalbasis-af-mathbbrn">41. Hvad er en ortonormalbasis af (\mathbb{R}^n)?</h2>

<p>En ortonormalbasis er en basis hvor vektorerne b√•de er</p>

<ul>
  <li><strong>Ortogonale:</strong> $v_i \cdot v_j = 0$ for $i \neq j$</li>
  <li><strong>Normerede:</strong> $|v_i| = 1$</li>
</ul>

<p>Dvs. vektorerne er ortogonale og har l√¶ngde 1.</p>

<hr />

<h2 id="42-hvad-kan-man-sige-om-s√∏jlerne-i-en-ortogonal-n-times-n-matrix-u">42. Hvad kan man sige om s√∏jlerne i en ortogonal (n \times n)-matrix (U)?</h2>

<p>S√∏jlerne i (U) danner en ortonormalbasis for $\mathbb{R}^n$</p>

<p>Det betyder ogs√•:</p>

\[U^T U = U U^T = I\]

<hr />

<h2 id="43-hvad-er-en-egenv√¶rdi-af-en-n-times-n-matrix-a">43. Hvad er en egenv√¶rdi af en (n \times n)-matrix (A)?</h2>

<p>Et tal (\omega), s√•dan at der findes en ikke-nul vektor $v \in \mathbb{R}^n$ med</p>

\[A v = \omega v\]

<p>Vektoren $v$ kaldes en egenvektor til egenv√¶rdien $\omega$.</p>

<hr />

<h2 id="44-hvordan-kan-jeg-bestemme-egenv√¶rdierne-af-a">44. Hvordan kan jeg bestemme egenv√¶rdierne af (A)?</h2>

<p>Egenv√¶rdierne er nulpunkterne til det karakteristiske polynomium:</p>

\[\det(A - \omega I) = 0\]

<p>L√∏sning af denne ligning giver egenv√¶rdierne $\omega$</p>

<hr />

<h2 id="45-hvad-er-egenrummet-af-a-til-egenv√¶rdien-omega">45. Hvad er egenrummet af $A$ til egenv√¶rdien $\omega$?</h2>

<p>Egenrummet er m√¶ngden af alle egenvektorer til $\omega$ plus nulvektoren:</p>

\[\text{Nul}(A - \omega I) = \{ v \mid (A - \omega I)v = 0 \}\]

<hr />

<h2 id="46-hvordan-kan-jeg-bestemme-egenvektorer-v-til-egenv√¶rdien-omega">46. Hvordan kan jeg bestemme egenvektorer $v$ til egenv√¶rdien $\omega$?</h2>

<p>L√∏s det homogene ligningssystem:</p>

\[(A - \omega I) v = 0\]

<p>Alle l√∏sninger $v \neq 0$ er egenvektorer til $\omega$.</p>

<hr />

<h2 id="47-hvorn√•r-kaldes-en-n-times-n--matrix--a-diagonaliserbar">47. Hvorn√•r kaldes en $n \times n -matrix  A$ diagonaliserbar?</h2>

<p>Hvis den er simil√¶r med en diagonal matrix $D$, dvs. hvis der findes en inverterbar matrix $P$, s√•</p>

\[A = P D P^{-1}\]

<hr />

<h2 id="48-hvis-a--p-d-p-1-er-en-diagonalisering-af-a-hvad-er-indgangene-i-d-og-p">48. Hvis $A = P D P^{-1}$ er en diagonalisering af $A$, hvad er indgangene i $D$ og $P$?</h2>

<ul>
  <li>Diagonalen i $D$ indeholder egenv√¶rdierne til $A$.</li>
  <li>S√∏jlerne i $P$ er egenvektorer til $A$, i samme r√¶kkef√∏lge som egenv√¶rdierne i $D$.</li>
</ul>

<hr />

<h2 id="49-er-alle-kvadratiske-matricer-diagonaliserbare">49. Er alle kvadratiske matricer diagonaliserbare?</h2>

<p>Nej, ikke alle er diagonaliserbare.</p>

<hr />

<h2 id="50-hvorn√•r-er-en-kvadratisk-matrix-a-diagonaliserbar">50. Hvorn√•r er en kvadratisk matrix (A) diagonaliserbar?</h2>

<p>Hvis og kun hvis for hver egenv√¶rdi stemmer den algebraiske multiplicitet overens med den geometriske multiplicitet.</p>

<h2 id="51-hvad-ved-man-om-symmetriske-matricer">51. Hvad ved man om symmetriske matricer?</h2>

<p>En symmetrisk matrix $S$ er altid diagonaliserbar ‚Äî faktisk er $S$ endda ortogonalt diagonaliserbar, dvs. der findes en diagonal matrix $D$ og en ortogonal matrix $U$ s√•dan at</p>

\[S = U D U^T\]

<p>(hvor $U^T = U^{-1}$, fordi $U$ er ortogonal).</p>

<hr />

<h2 id="52-hvad-er-en-mindste-kvadraters-l√∏sning-til-ax--b">52. Hvad er en mindste kvadraters l√∏sning til $Ax = b$?</h2>

<p>En vektor $\hat{x}$, s√•dan at</p>

\[|b - A \hat{x}| \leq \|b - A x\| \quad \text{for alle } x\]

<p>Dvs. $\hat{x}$ minimerer den kvadrerede afstand mellem $b$ og $A x$.</p>

<hr />

<h2 id="53-hvordan-kan-man-bestemme-mindste-kvadraters-l√∏sninger">53. Hvordan kan man bestemme mindste kvadraters l√∏sninger?</h2>

<p>$\hat{x}$ er mindste kvadraters l√∏sning til $Ax = b$ hvis og kun hvis $\hat{x}$ l√∏ser normalligningen:</p>

\[A^T A \hat{x} = A^T b\]

<hr />

<h2 id="54-er-mindste-kvadraters-l√∏sninger-entydige">54. Er mindste kvadraters l√∏sninger entydige?</h2>

<p>Ikke altid. De er entydige hvis og kun hvis $A$ har fuld rang, eller √¶kvivalent hvis $A^T A$ er inverterbar.</p>

<hr />

<h2 id="55-hvorn√•r-giver-det-mening-at-bruge-mindste-kvadraters-metoden">55. Hvorn√•r giver det mening at bruge mindste kvadraters metoden?</h2>

<p>N√•r man ikke har nogen grund til at tro, eller ikke er sikker p√•, at det oprindelige system $Ax = b$ er konsistent.</p>

<hr />

<h2 id="56-hvad-hvis-jeg-udregner-en-mindste-kvadraters-l√∏sning-hatx-til-et-system-ax--b-som-faktisk-er-konsistent">56. Hvad, hvis jeg udregner en mindste kvadraters l√∏sning $\hat{x}$ til et system $Ax = b$, som faktisk er konsistent?</h2>

<p>S√• er enhver mindste kvadraters l√∏sning $\hat{x}$ ogs√• en almindelig l√∏sning til $Ax = b$, dvs.</p>

\[A \hat{x} = b\]

<hr />

<h2 id="57-hvad-er-et-line√¶rt-programmeringsproblem-p√•-kanonisk-form">57. Hvad er et line√¶rt programmeringsproblem p√• kanonisk form?</h2>

<p>Maksimer</p>

\[c^T x\]

<p>under bibetingelserne</p>

\[A x \leq b, \quad x \geq 0\]

<hr />

<h2 id="58-hvordan-kan-bibetingelser-som-a_it-x-geq-b_i-eller-a_it-x--b_i-omskrives-i-et-line√¶rt-programmeringsproblem-p√•-kanonisk-form">58. Hvordan kan bibetingelser som $a_i^T x \geq b_i$ eller $a_i^T x = b_i$ omskrives i et line√¶rt programmeringsproblem p√• kanonisk form?</h2>

<ul>
  <li>$a_i^T x \geq b_i$ omskrives som $-a_i^T x \leq -b_i$</li>
  <li>$a_i^T x = b_i$ omskrives som to uligheder: $a_i^T x \leq b_i$ og $a_i^T x \geq b_i$</li>
</ul>

<hr />

<h2 id="59-hvad-hvis-man-vil-minimere-ct-x-kan-man-stadigv√¶k-opstille-et-line√¶rt-programmeringsproblem-p√•-kanonisk-form">59. Hvad, hvis man vil minimere $c^T x$: kan man stadigv√¶k opstille et line√¶rt programmeringsproblem p√• kanonisk form?</h2>

<p>Ja, minimere $c^T x$ kan omskrives til maksimering af $-c^T x$.</p>

<hr />

<h2 id="60-kender-du-to-situationer-hvor-man-ikke-finder-en-optimal-l√∏sning-til-et-line√¶rt-programmeringsproblem">60. Kender du to situationer, hvor man ikke finder en optimal l√∏sning til et line√¶rt programmeringsproblem?</h2>

<ol>
  <li>Feasibility set $F$ er tomt (ingen l√∏sninger).</li>
  <li>$c^T x$ er ubegr√¶nset p√• $F$ (ingen maksimum).</li>
</ol>

<hr />

<h2 id="61-hvis-f-ikke-er-tom-og-ct-x-er-begr√¶nset-p√•-f-hvor-i-f-ligger-de-optimale-l√∏sninger">61. Hvis $F$ ikke er tom og $c^T x$ er begr√¶nset p√• $F$, hvor i $F$ ligger de optimale l√∏sninger?</h2>

<p>Mindst √©n optimal l√∏sning findes i et ekstremalpunkt (hj√∏rnepunkt) af den konvekse m√¶ngde $F$</p>

<hr />

<h2 id="62-skitser-m√¶ngden-f-af-alle-vektorer-x--x_1-x_2-der-opfylder">62. Skitser m√¶ngden $F$ af alle vektorer $x = (x_1, x_2)$, der opfylder</h2>

\[0 \leq x_1 \leq 2, \quad 0 \leq x_2 \leq 2, \quad x_1 + x_2 \leq 3\]

<p>Hvilke punkter i $F$ ville du afpr√∏ve som mulige optimale l√∏sninger i den grafiske metode?</p>

<p>Svar: De mulige optimale l√∏sninger ligger i hj√∏rnerne af $F$:</p>

\[(0,0), (2,0), (0,2), (2,1), (1,2)\]

<hr />

<h2 id="63-hvordan-opstiller-man-en-initial-simplextableau-begyndelsessimplextableau-for-et-line√¶rt-programmeringsproblem-p√•-kanonisk-form">63. Hvordan opstiller man en initial simplextableau (begyndelsessimplextableau) for et line√¶rt programmeringsproblem p√• kanonisk form?</h2>

<ul>
  <li>Tilf√∏j slack-variabler for at omskrive uligheder til ligheder.</li>
  <li>Antal slack-variabler svarer til antallet af uligheder.</li>
  <li>Objektfunktionen tilf√∏jes som sidste r√¶kke i tableau.</li>
</ul>

<hr />

<h2 id="64-beskriv-algoritmen-i-simplexmetoden-i-tilf√¶lde-hvor-alle-indgange-i-b-er-positive">64. Beskriv algoritmen i simplexmetoden i tilf√¶lde, hvor alle indgange i $b$ er positive!</h2>

<ul>
  <li>V√¶lg indgangsvariabel (variabel med mest negativ koefficient i objektfunktionen).</li>
  <li>Bestem udgangsvariabel via minimum ratio test.</li>
  <li>Udf√∏r pivotering.</li>
  <li>Gentag indtil ingen negative koefficienter i objektfunktionen.</li>
  <li>Optimal l√∏sning afl√¶ses i tableau.</li>
</ul>

<hr />

<h2 id="65-kan-man-g√∏re-noget-hvis-b-har-en-eller-flere-negative-indgange">65. Kan man g√∏re noget, hvis $b$ har en eller flere negative indgange?</h2>

<p>Ja, man kan bruge en ‚Äúbig M‚Äù metode eller to-fase simplex til at starte med en basisl√∏sning.</p>

<hr />

<h2 id="66-hvad-er-det-duale-problem-til-et-line√¶rt-programmeringsproblem-p√•-kanonisk-form">66. Hvad er det duale problem til et line√¶rt programmeringsproblem p√• kanonisk form?</h2>

<p>Hvis primalproblemet er</p>

\[\max c^T x \quad \text{under} \quad A x \leq b, \quad x \geq 0\]

<p>s√• er det duale problem</p>

\[\min b^T y \quad \text{under} \quad A^T y \geq c, \quad y \geq 0\]

<hr />

<h2 id="67-hvad-er-udsagnet-af-dualitetss√¶tningen-om-line√¶re-programmeringsproblemer-samt-deres-duale-problemer">67. Hvad er udsagnet af dualitetss√¶tningen om line√¶re programmeringsproblemer samt deres duale problemer?</h2>

<p>Hvis primalproblemet har en optimal l√∏sning, s√• har dualproblemet ogs√• en optimal l√∏sning, og deres optimale v√¶rdier er ens:</p>

\[\max c^T x = \min b^T y\]

<p>Desuden, hvis enten primal eller dual har ubegr√¶nset l√∏sning, s√• er det modsatte problem ufeasible.</p>]]></content><author><name>Esben J√∏rgensen</name></author><summary type="html"><![CDATA[layout: post title: ‚ÄúLinear Algebra Example‚Äù date: 2025-06-10 categories: [blog] ‚Äî]]></summary></entry><entry><title type="html">Linear Algebra</title><link href="http://localhost:4000/2025/06/06/linear-algebra.html" rel="alternate" type="text/html" title="Linear Algebra" /><published>2025-06-06T00:00:00+02:00</published><updated>2025-06-06T00:00:00+02:00</updated><id>http://localhost:4000/2025/06/06/linear-algebra</id><content type="html" xml:base="http://localhost:4000/2025/06/06/linear-algebra.html"><![CDATA[<hr />
<p>layout: post
title: ‚ÄúLinear Algebra Ordbog‚Äù
date: 2025-06-10
categories: [blog]
‚Äî</p>

<h1 id="lial-ordliste">LIAL, Ordliste</h1>
<h1 id="dansk-engelsk">Dansk-Engelsk</h1>

<h1 id="a">A</h1>
<h3 id="afbildning">afbildning</h3>
<p><em>map, transformation</em><br />
En regel eller funktion der ‚Äúflytter‚Äù en vektor fra √©t rum til et andet ‚Äì fx ved rotation, skalering eller forskydning.</p>

<h1 id="b">B</h1>
<h3 id="basisskift">basisskift</h3>
<p><em>change of basis</em><br />
N√•r man udtrykker vektorer i en ny basis, f.eks. fordi det forenkler en beregning eller tilpasser til en ny geometri.</p>

<h3 id="bijektion">bijektion</h3>
<p><em>one-to-one correspondence, bijection</em><br />
En funktion hvor hvert input svarer til √©t unikt output, og hvert output d√¶kkes.</p>

<h3 id="bijektiv-funktion">bijektiv funktion</h3>
<p><em>one-to-one correspondence, bijection</em><br />
En funktion der b√•de er injektiv (ingen gentagelser i output) og surjektiv (alle outputs bruges).</p>

<h3 id="bijektiv">bijektiv</h3>
<p><em>bijective</em><br />
En egenskab ved funktioner: b√•de injektiv og surjektiv, alts√• perfekt match mellem input og output.</p>

<h3 id="billede">billede</h3>
<p><em>image</em><br />
Alle de vektorer man f√•r ud efter en afbildning ‚Äì alts√• resultatet af at transformere hele definitionsm√¶ngden.</p>

<h3 id="billedm√¶ngde">billedm√¶ngde</h3>
<p><em>range (se ogs√• v√¶rdim√¶ngde)</em><br />
Det s√¶t af outputs en funktion faktisk rammer, ofte et underrum af kodom√¶net.</p>

<h1 id="d">D</h1>
<h3 id="definitionsm√¶ngde">definitionsm√¶ngde</h3>
<p><em>domain</em><br />
Alle de inputv√¶rdier man m√• give til en funktion ‚Äì alts√• hvor funktionen er defineret.</p>

<h3 id="delm√¶ngde">delm√¶ngde</h3>
<p><em>subset</em><br />
En m√¶ngde hvor alle elementer ogs√• findes i en st√∏rre m√¶ngde.</p>

<h3 id="determinant">determinant</h3>
<p><em>determinant</em><br />
Et tal der fort√¶ller om en matrix skalerer, spejler eller vender rummet ‚Äì fx hvor meget et areal/volumen √¶ndres.</p>

<h3 id="diagonaliserbar">diagonaliserbar</h3>
<p><em>diagonalizable</em><br />
En matrix er diagonaliserbar hvis den kan omskrives til en diagonal matrix vha. en basistransformation.</p>

<h3 id="diagonalisering">diagonalisering</h3>
<p><em>diagonalization</em><br />
Processen med at omskrive en matrix til en diagonal form, ved hj√¶lp af egenv√¶rdier og egenvektorer.</p>

<h3 id="dimension">dimension</h3>
<p><em>dimension</em><br />
Antallet af uafh√¶ngige retninger i et rum ‚Äì fx 2 i et plan, 3 i rum. Ogs√• antal basisvektorer.</p>

<h3 id="disjunkte">disjunkte</h3>
<p><em>disjoint</em><br />
To m√¶ngder er disjunkte, hvis de ikke har noget til f√¶lles ‚Äì deres f√¶llesm√¶ngde er tom.</p>

<h3 id="dispositionsm√¶ngde">dispositionsm√¶ngde</h3>
<p><em>codomain</em><br />
Alle mulige outputv√¶rdier som en funktion kan antage ‚Äì ikke n√∏dvendigvis alle bliver ramt.</p>

<h1 id="e">E</h1>
<h3 id="echelonform">echelonform</h3>
<p><em>echelon form (se ogs√• trappeform)</em><br />
En matrix er i echelonform, hvis dens r√¶kker ‚Äútrapper ned‚Äù med nuller foran, og pivoterne st√•r til h√∏jre for den ovenst√•ende.</p>

<h3 id="element">element</h3>
<p><em>entry</em><br />
Et enkelt tal eller v√¶rdi i en matrix eller vektor ‚Äì ogs√• kaldet en indgang.</p>

<h3 id="egenrum">egenrum</h3>
<p><em>eigenspace</em><br />
Alle egenvektorer (og deres linearkombinationer) der h√∏rer til en bestemt egenv√¶rdi ‚Äì alts√• rummet af l√∏sninger til ((A - \lambda I)x = 0).</p>

<h3 id="egenvektor">egenvektor</h3>
<p><em>eigenvector</em><br />
En vektor som ved transformation kun bliver skaleret, ikke √¶ndret retning ‚Äì opfylder (Av = \lambda v).</p>

<h3 id="egenv√¶rdi">egenv√¶rdi</h3>
<p><em>eigenvalue</em><br />
Tallet (\lambda) som fort√¶ller hvor meget en egenvektor skaleres ved transformation.</p>

<h3 id="endelig">endelig</h3>
<p><em>finite</em><br />
Betyder at noget har et begr√¶nset antal elementer eller st√∏rrelse ‚Äì mods√¶tning til uendelig.</p>

<h1 id="f">F</h1>
<h3 id="foreningsm√¶ngde">foreningsm√¶ngde</h3>
<p><em>union</em><br />
M√¶ngden af alle elementer fra to (eller flere) m√¶ngder ‚Äì alt der optr√¶der mindst √©n gang.</p>

<h3 id="f√¶llesm√¶ngde">f√¶llesm√¶ngde</h3>
<p><em>intersection</em><br />
Det som to (eller flere) m√¶ngder har til f√¶lles ‚Äì alts√• de overlappende elementer.</p>

<h1 id="g">G</h1>
<h3 id="gauss-elimination">Gauss-elimination</h3>
<p><em>Gaussian elimination</em><br />
En metode til at omskrive et ligningssystem eller matrix til trappeform ved r√¶kkeoperationer, for nemmere l√∏sning.</p>

<h1 id="h">H</h1>
<h3 id="heltal">heltal</h3>
<p><em>integer</em><br />
Et tal uden decimaler ‚Äì b√•de positive, negative og nul: ‚Ä¶, -3, -2, -1, 0, 1, 2, 3, ‚Ä¶</p>

<h3 id="hoveddiagonal">hoveddiagonal</h3>
<p><em>main diagonal</em><br />
Elementerne fra √∏verste venstre hj√∏rne til nederste h√∏jre i en kvadratisk matrix ‚Äì de hvor r√¶kke- og s√∏jleindeks er ens.</p>

<h1 id="i">I</h1>
<h3 id="identitetsmatrix">identitetsmatrix</h3>
<p><em>identity matrix</em><br />
En kvadratisk matrix med 1‚Äôere p√• hoveddiagonalen og 0‚Äôer ellers ‚Äì fungerer som ‚Äú1‚Äù i matrixmultiplikation.</p>

<h3 id="indgang">indgang</h3>
<p><em>entry</em><br />
Et andet ord for et element i en matrix eller vektor.</p>

<h3 id="indre-produkt">indre produkt</h3>
<p><em>inner product</em><br />
Et m√•l for ‚Äúl√¶ngde og vinkel‚Äù mellem to vektorer ‚Äì i R‚Åø svarer det til prikproduktet.</p>

<h3 id="injektiv">injektiv</h3>
<p><em>injective, one-to-one</em><br />
En funktion er injektiv hvis hvert output stammer fra √©t unikt input ‚Äì ingen gentagelser.</p>

<h3 id="inverterbar">inverterbar</h3>
<p><em>invertible (se ogs√• invertibel)</em><br />
En matrix der har en omvendt (inverse) matrix, s√• (A^{-1}A = I). Kun muligt hvis determinanten er forskellig fra nul.</p>

<h3 id="invertibel">invertibel</h3>
<p><em>invertible (se ogs√• inverterbar)</em><br />
Samme som ovenfor ‚Äì betyder at transformationen kan ‚Äúrulles tilbage‚Äù.</p>

<h1 id="k">K</h1>
<h3 id="kanonisk-basis">kanonisk basis</h3>
<p><em>standard basis</em><br />
En basis best√•ende af enhedsvektorer ‚Äì fx ([1,0,0], [0,1,0], [0,0,1]) i R¬≥.</p>

<h3 id="karakteristisk-ligning">karakteristisk ligning</h3>
<p><em>characteristic equation</em><br />
Ligningen (\det(A - \lambda I) = 0) som bruges til at finde egenv√¶rdier.</p>

<h3 id="karakteristisk-polynomium">karakteristisk polynomium</h3>
<p><em>characteristic polynomial</em><br />
Polynomiet (\det(A - \lambda I)), hvis r√∏dder er egenv√¶rdierne.</p>

<h3 id="kofaktor">kofaktor</h3>
<p><em>cofactor</em><br />
Et tal man f√•r ved at tage determinanten af en mindre matrix (minor), ganget med ((-1)^{i+j}).</p>

<h3 id="kofaktorudvidelse">kofaktorudvidelse</h3>
<p><em>cofactor expansion</em><br />
En metode til at beregne determinanter ved at ekspandere langs en r√¶kke eller s√∏jle med kofaktorer.</p>

<h3 id="koordinatvektor">koordinatvektor</h3>
<p><em>coordinate vector</em><br />
En vektor der viser, hvordan en vektor er sammensat ud fra en valgt basis.</p>

<h3 id="korollar">korollar</h3>
<p><em>corollary</em><br />
En s√¶tning der f√∏lger direkte af en anden s√¶tning eller bevis ‚Äì alts√• en slags ‚Äúkonsekvens‚Äù.</p>

<h1 id="l">L</h1>
<h3 id="ledende-koefficient">ledende koefficient</h3>
<p><em>leading entry</em><br />
Den f√∏rste ikke-nul v√¶rdi i en r√¶kke i en matrix ‚Äì bruges til at finde pivoter.</p>

<h3 id="lemma">lemma</h3>
<p><em>lemma</em><br />
En hj√¶lpes√¶tning der bruges som del af et st√∏rre bevis.</p>

<h3 id="linearkombination">linearkombination</h3>
<p><em>linear combination</em><br />
En sum af vektorer ganget med skalarer ‚Äì fx (2v_1 + 3v_2).</p>

<h3 id="line√¶r-uafh√¶ngig">line√¶r (u)afh√¶ngig</h3>
<p><em>linearly (in)dependent</em><br />
Vektorer er uafh√¶ngige hvis ingen kan skrives som kombination af de andre ‚Äì ellers er de afh√¶ngige.</p>

<h3 id="line√¶r-uafh√¶ngighed">line√¶r (u)afh√¶ngighed</h3>
<p><em>linear (in)dependence</em><br />
Egenskaben af et vektors√¶t ‚Äì om det er muligt at udtrykke √©n som en kombination af de andre.</p>

<h1 id="m">M</h1>
<h3 id="mindste-kvadraters-metode">mindste kvadraters metode</h3>
<p><em>method of least squares</em><br />
En metode til at finde den bedste (mindst fejlagtige) l√∏sning til et overbestemt system ‚Äì f.eks. i regression.</p>

<h3 id="underdeterminant">underdeterminant</h3>
<p><em>minor</em><br />
Det man f√•r ved at fjerne √©n r√¶kke og √©n s√∏jle fra en matrix og tage determinanten af det resterende.</p>

<h3 id="m√¶ngde">m√¶ngde</h3>
<p><em>set</em><br />
En samling af unikke elementer ‚Äì fx {1, 2, 3}.</p>

<h1 id="n">N</h1>
<h3 id="nullitet">nullitet</h3>
<p><em>nullity</em><br />
Dimensionen af nulrummet ‚Äì alts√• hvor mange frie variable der er i l√∏sningen af (Ax = 0).</p>

<h3 id="nulrum">nulrum</h3>
<p><em>null space</em><br />
M√¶ngden af alle vektorer (x) der opfylder (Ax = 0). Et underrum af definitionsm√¶ngden.</p>

<h3 id="nulvektor">nulvektor</h3>
<p><em>zero vector</em><br />
En vektor hvor alle indgange er nul ‚Äì l√¶ngde 0 og ingen retning.</p>

<h1 id="p">P</h1>
<h3 id="pivotindgang">pivotindgang</h3>
<p><em>pivot entry</em><br />
Den f√∏rste ikke-nul v√¶rdi i en r√¶kke i en matrix ‚Äì bruges til r√¶kkeoperationer og trappeform.</p>

<h3 id="pivots√∏jle">pivots√∏jle</h3>
<p><em>pivot column</em><br />
En s√∏jle der indeholder en pivot ‚Äì typisk en vigtig s√∏jle ifm. l√∏sning af ligninger.</p>

<h1 id="r">R</h1>
<h3 id="rang">rang</h3>
<p><em>rank</em><br />
Antallet af uafh√¶ngige r√¶kker eller s√∏jler i en matrix ‚Äì afg√∏r matrixens ‚Äústyrke‚Äù.</p>

<h3 id="regul√¶r-matrix">regul√¶r matrix</h3>
<p><em>invertible matrix</em><br />
En matrix der har en invers ‚Äì kun mulig hvis rang = antal r√¶kker (fuld rang).</p>

<h3 id="r√¶kke">r√¶kke</h3>
<p><em>row</em><br />
En vandret linje i en matrix.</p>

<h3 id="r√¶kkereduktion">r√¶kkereduktion</h3>
<p><em>row reduction</em><br />
Processen med at bruge r√¶kkeoperationer til at bringe en matrix p√• echelonform eller reduceret echelonform.</p>

<h1 id="s">S</h1>
<h3 id="skalarprodukt">skalarprodukt</h3>
<p><em>scalar product</em><br />
Et tal man f√•r ved at tage indre produkt af to vektorer ‚Äì bruges fx til projektion og vinkelberegning.</p>

<h3 id="singul√¶r-matrix">singul√¶r matrix</h3>
<p><em>singular matrix</em><br />
En matrix der <strong>ikke</strong> har en invers ‚Äì typisk fordi determinanten er 0.</p>

<h3 id="sp√¶nd">sp√¶nd</h3>
<p><em>span</em><br />
Alle mulige linearkombinationer af et vektors√¶t ‚Äì definerer et underrum.</p>

<h3 id="standardbasis">standardbasis</h3>
<p><em>standard basis (se ogs√• kanonisk basis)</em><br />
De vektorer der peger i √©n og kun √©n retning ‚Äì fx ([1,0], [0,1]) i R¬≤.</p>

<h3 id="surjektiv">surjektiv</h3>
<p><em>surjective, onto</em><br />
En funktion hvor hvert output i kodom√¶net bliver ramt af mindst √©t input.</p>

<h3 id="s√¶tning">s√¶tning</h3>
<p><em>theorem</em><br />
En matematisk p√•stand der er blevet bevist ud fra aksiomer og tidligere s√¶tninger.</p>

<h3 id="s√∏jle">s√∏jle</h3>
<p><em>column</em><br />
En lodret linje i en matrix.</p>

<h3 id="s√∏jlerum">s√∏jlerum</h3>
<p><em>column space</em><br />
M√¶ngden af alle linearkombinationer af en matrix‚Äô s√∏jler ‚Äì samme som billedm√¶ngde.</p>

<h1 id="t">T</h1>
<h3 id="totalmatrix">totalmatrix</h3>
<p><em>augmented matrix (se ogs√• udvidet koefficientmatrix)</em><br />
En matrix der indeholder b√•de koefficienter og resultatled fra et ligningssystem.</p>

<h3 id="transponering">transponering</h3>
<p><em>transpose</em><br />
Man bytter r√¶kker og s√∏jler i en matrix ‚Äì alts√• spejler over hoveddiagonalen.</p>

<h3 id="trappeform">trappeform</h3>
<p><em>echelon form (se ogs√• echelonform)</em><br />
En form hvor nuller er flyttet ned og til venstre i matrixen ‚Äì giver trinvis struktur.</p>

<h3 id="triangul√¶r-matrix">triangul√¶r matrix</h3>
<p><em>triangular matrix</em><br />
En matrix hvor alle elementer under eller over hoveddiagonalen er nul ‚Äì enten √∏vre eller nedre triangul√¶r.</p>

<h3 id="triviel-l√∏sning">triviel l√∏sning</h3>
<p><em>trivial solution</em><br />
Den simple l√∏sning (x = 0) til ligningen (Ax = 0).</p>

<h1 id="u">U</h1>
<h3 id="uendelig">uendelig</h3>
<p><em>infinite</em><br />
Ikke endeligt ‚Äì noget uden gr√¶nse, fx en uendelig l√∏sningsm√¶ngde.</p>

<h3 id="udvidet-koefficientmatrix">udvidet koefficientmatrix</h3>
<p><em>augmented matrix (se ogs√• totalmatrix)</em><br />
En matrix der inkluderer b√•de koefficienterne og resultatleddene fra et ligningssystem.</p>

<h3 id="undermatrix">undermatrix</h3>
<p><em>submatrix</em><br />
En mindre matrix man f√•r ved at fjerne r√¶kker og/eller s√∏jler fra en st√∏rre matrix.</p>

<h3 id="underrum">underrum</h3>
<p><em>subspace</em><br />
Et rum inden for et st√∏rre vektor rum, som ogs√• opfylder regler for lukkethed under addition og skalering.</p>

<h1 id="v">V</h1>
<h3 id="vectorsp√¶nd">vectorsp√¶nd</h3>
<p><em>vector span</em><br />
Alle mulige linearkombinationer af et givet vektors√¶t ‚Äì definerer hvilket rum de ‚Äúudsp√¶nder‚Äù.</p>

<h3 id="v√¶rdim√¶ngde">v√¶rdim√¶ngde</h3>
<p><em>image/range (se ogs√• billedm√¶ngde)</em><br />
Det s√¶t af outputv√¶rdier som en funktion faktisk rammer ‚Äì samme som billedm√¶ngde.</p>]]></content><author><name>Esben J√∏rgensen</name></author><summary type="html"><![CDATA[layout: post title: ‚ÄúLinear Algebra Ordbog‚Äù date: 2025-06-10 categories: [blog] ‚Äî]]></summary></entry><entry><title type="html">INNHABIT Network Overview</title><link href="http://localhost:4000/blog/2025/05/26/innhabit-network.html" rel="alternate" type="text/html" title="INNHABIT Network Overview" /><published>2025-05-26T00:00:00+02:00</published><updated>2025-05-26T00:00:00+02:00</updated><id>http://localhost:4000/blog/2025/05/26/innhabit-network</id><content type="html" xml:base="http://localhost:4000/blog/2025/05/26/innhabit-network.html"><![CDATA[<h1 id="what-is-innhabit">What is INNHABIT</h1>
<p>INNHABIT is an Entry-Exit-Tracking system, monitoring every entrance at AAU INNOVATE via Computer Vision, then sending Entry/Exit events to a Central Aggregation Server.
<img src="/assets/SystemDiagramAlternate.png" alt="SystemOverview" style="width:100%;" /></p>
<blockquote>
  <h4 id="goal-of-networking-for-innhabit"><strong>Goal of Networking for INNHABIT</strong></h4>
  <ul>
    <li>Send Entry/Exit events from Jetson to Aggregation Server</li>
    <li>Store Entry/Exit events for further analysis</li>
    <li>Update setting on Jetson remotely from Aggregation Server</li>
    <li>Serve a Web Dashboard for detailed statics</li>
    <li>Serve focused statics to existing digital signage</li>
  </ul>
</blockquote>

<h1 id="jetson-internal-architecture">Jetson Internal architecture</h1>
<p>The software of the Jetson implement multiple threads each having a class and task assigned.<br />
A simplifyed thread description and diagram can be seen below:<br />
<img src="/assets/ThreadDiagram.png" alt="SystemOverview" style="width:100%;" />
The figure shows all main threads and the shared resourses between them.
The main program flow is a follows</p>
<blockquote>
  <ul>
    <li><strong>FrameCapturer Thread</strong> Captures frames from camera and adds them to <em>frameQueue</em></li>
    <li><strong>Detection Thread</strong> Takes frames from <strong>frameQueue</strong>, runs ML and tracking, calls <strong>Api Handler Thread</strong> if Entry/Exit is detected. Adds image with detection and tracking to <strong>displayQueue</strong>, runs ML and tracking, calls <strong>Api Hander Thread</strong> if Entry/Exit is detected. Adds image with detection and tracking to <strong>displayQueue</strong>.</li>
    <li><strong>Display Thread</strong> Takes frames from <strong>displayQueue</strong> and dispays them to either an attached monitor, x11 forwarding session, or RTSP stream.</li>
    <li><strong>DevicePoller Thread</strong> uses <strong>Api Handler Thread</strong> to poll <strong>Aggregation server</strong> for updated settings</li>
    <li><strong>Api Handler Thread</strong> handles all network communication, takes request/events from a queue, ensuring no event is skipped cause of other events stalling.</li>
  </ul>

</blockquote>

<h3 id="sending-entryexit-events">Sending Entry/Exit events</h3>
<p>An Entry/Exit event is sent everytime it is detected that a person has entered or exited.
The sending of these event is handled by a dedicated thread <em>ApiHandler</em>.<br />
The flow of such and event can be seen below:
<img src="/assets/network_person_event_diagram.png" alt="SystemOverview" style="width:100%;" />
The Jetsons installed are only be connected to via Wi-Fi. This makes deployment more flexible and reduces installation costs.<br />
The Jetsons are connected to a <em>Word-Wide-Web</em> connected network, seperate from <em>eduroam</em>. Bypassing alot of issues caused by the security system around <em>eduroam</em>. The Jetsons uploads Entry/Exit events via HTTP<em>s</em> to the Aggregation server hosted with the <em>DNS</em> adress <em>INNHABIT.dk</em>.
The Jetsons uses <em>libcurl</em> for sending HTTP<em>s</em> PUT request to <em>INNHABIT</em> at designted <em>API</em> endpoints.</p>
<h2 id="api-endpoints-for-jetson"><strong>API endpoints for Jetson</strong></h2>
<p><img src="/assets/EndpointDiagram.png" alt="API" style="width:100%;" /></p>

<p>For handling the all <em>API</em> events the Jetsons software has a dedicated thread and class <em>ApiHandler</em>.
<em>ApiHandler</em> works of a queue of <em>API</em> events ensuring no events are missed or stalls the system.
<em>libcurl</em> is designed to simplify the integration of HTTP<em>s</em>, and the code for contruction and sending a HTTP<em>s</em> request with JSON body is seen below.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ApiHandler:sendPostRequest
</span>
<span class="n">json</span> <span class="n">ApiHandler</span><span class="o">::</span><span class="n">sendPostRequest</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">endpoint</span><span class="p">,</span> <span class="k">const</span> <span class="n">json</span><span class="o">&amp;</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">curl_slist</span><span class="o">*</span> <span class="n">headers</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">"Content-Type: application/json"</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">auth_header</span> <span class="o">=</span> <span class="s">"Authorization: Bearer "</span> <span class="o">+</span> <span class="n">api_key_</span><span class="p">;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="n">curl_slist_append</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">auth_header</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">full_url</span> <span class="o">=</span> <span class="n">base_url_</span> <span class="o">+</span> <span class="n">endpoint</span><span class="p">;</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="n">full_url</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">data_str</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_POSTFIELDS</span><span class="p">,</span> <span class="n">data_str</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>

    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_HTTPHEADER</span><span class="p">,</span> <span class="n">headers</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">response</span><span class="p">;</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_WRITEFUNCTION</span><span class="p">,</span> <span class="n">writeCallback</span><span class="p">);</span>
    <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">response</span><span class="p">);</span>

    <span class="kt">long</span> <span class="n">http_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">CURLcode</span> <span class="n">res</span> <span class="o">=</span> <span class="n">curl_easy_perform</span><span class="p">(</span><span class="n">curl_</span><span class="p">);</span>
    <span class="n">curl_easy_getinfo</span><span class="p">(</span><span class="n">curl_</span><span class="p">,</span> <span class="n">CURLINFO_RESPONSE_CODE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">http_code</span><span class="p">);</span>

    <span class="n">json</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">CURLE_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">http_code</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="n">http_code</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">is_discarded</span><span class="p">())</span> <span class="p">{</span>
                    <span class="n">ERROR</span><span class="p">(</span><span class="s">"Failed to parse response as JSON"</span><span class="p">);</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">json</span><span class="o">::</span><span class="n">parse_error</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">ERROR</span><span class="p">(</span><span class="s">"Parse error: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">());</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
                <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ERROR</span><span class="p">(</span><span class="s">"HTTP error: "</span> <span class="o">&lt;&lt;</span> <span class="n">http_code</span> <span class="o">&lt;&lt;</span> <span class="s">" - Response: "</span> <span class="o">&lt;&lt;</span> <span class="n">response</span><span class="p">);</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
            <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">ERROR</span><span class="p">(</span><span class="s">"CURL error: "</span> <span class="o">&lt;&lt;</span> <span class="n">curl_easy_strerror</span><span class="p">(</span><span class="n">res</span><span class="p">));</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="p">();</span>
        <span class="n">last_api_success_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">curl_slist_free_all</span><span class="p">(</span><span class="n">headers</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The HTTP request contructed from this example looks something like:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> <span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">events</span><span class="o">/</span><span class="n">entries</span><span class="o">/</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">Host</span><span class="o">:</span> <span class="n">innhabit</span><span class="p">.</span><span class="n">dk</span>
<span class="n">Authorization</span><span class="o">:</span> <span class="n">Bearer</span> <span class="o">&lt;</span><span class="n">GoodEncryptedKeyForSpecificEntrance</span><span class="o">&gt;</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="o">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>

<span class="p">{</span>
  <span class="s">"timestamp"</span><span class="o">:</span> <span class="s">"2025-05-29T12:34:56Z"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With a HTTP POST request sent to the server, what then happens when it‚Äôs recieved?</p>
<h1 id="aggregation-server">Aggregation Server</h1>
<p>The internal architecture is run inside a <a href="https://www.docker.com/"><strong>Docker</strong></a> network with multiple containers handling different parts of the system.<br />
The <em>Docker</em> network can be seen below: <em>All arrows a bi-directional</em>
<img src="/assets/DockerDiagram.png" alt="SystemOverview" style="width:100%;" />
As can be seen on the image above, the <em>Docker</em> network consists of 4 containers described below:</p>
<h3 id="nginx">NGINX</h3>
<p><a href="https://nginx.org/"><strong>NGINX</strong></a> can be seen as the front end of the system, being the only container able of direct communication with clients.
INGINX servers client with all static resourses such as HTML and Images, thenpasses request to Gunicorn if any logic needs to be handles, such as permissions or dynamically updating charts.</p>
<h3 id="gunicorn--django">Gunicorn / Django</h3>
<p>Gunicorn is where the brain of the Webserver is hosted, Gunicorn hosts a Django Webserver and then handles communication between IGINX and Django.
Django then handles database communication and all dynamic content on the Webserver.
Some of the dynamic sites is mainly the admindashboard and insights page seen below:<br />
<img src="/assets/admindashboard.png" alt="Dashboard" style="width:100%;" />
<img src="/assets/insights.png" alt="Insight" style="width:49%;" />
<img src="/assets/PublicInsight.png" alt="Insight" style="width:49%;" /></p>
<h3 id="postgresql">PostgreSQL</h3>
<p>PostgreSQL is the database used for storing all the Entry/Exit events, it is hosted in its own docker container for easy integration, and communicates with Gunicorn. The database is contructed with Multiple tables which can be seen on the Figure Below:<br />
<img src="/assets/innhabit-db.png" alt="DataBase" style="width:100%;" /></p>

<h3 id="valkey">Valkey</h3>
<p>Valkey is a key/value datastore used to store password API keys, valued for its security and easy integration with Django and Gunicorn.
The API keys generated, as shown in the figure below, consist of an easy-to-read identifier, a prefix to distinguish the key, and a secret 64-character long key that is randomly generated. This randomness is why salting is not necessary.
<img src="/assets/APISections.png" alt="APIKey" style="width:100%;" /></p>]]></content><author><name>Esben J√∏rgensen</name></author><category term="blog" /><summary type="html"><![CDATA[What is INNHABIT INNHABIT is an Entry-Exit-Tracking system, monitoring every entrance at AAU INNOVATE via Computer Vision, then sending Entry/Exit events to a Central Aggregation Server. Goal of Networking for INNHABIT Send Entry/Exit events from Jetson to Aggregation Server Store Entry/Exit events for further analysis Update setting on Jetson remotely from Aggregation Server Serve a Web Dashboard for detailed statics Serve focused statics to existing digital signage Jetson Internal architecture The software of the Jetson implement multiple threads each having a class and task assigned. A simplifyed thread description and diagram can be seen below: The figure shows all main threads and the shared resourses between them. The main program flow is a follows FrameCapturer Thread Captures frames from camera and adds them to frameQueue Detection Thread Takes frames from frameQueue, runs ML and tracking, calls Api Handler Thread if Entry/Exit is detected. Adds image with detection and tracking to displayQueue, runs ML and tracking, calls Api Hander Thread if Entry/Exit is detected. Adds image with detection and tracking to displayQueue. Display Thread Takes frames from displayQueue and dispays them to either an attached monitor, x11 forwarding session, or RTSP stream. DevicePoller Thread uses Api Handler Thread to poll Aggregation server for updated settings Api Handler Thread handles all network communication, takes request/events from a queue, ensuring no event is skipped cause of other events stalling.]]></summary></entry><entry><title type="html">Ssp</title><link href="http://localhost:4000/2025/05/26/ssp.html" rel="alternate" type="text/html" title="Ssp" /><published>2025-05-26T00:00:00+02:00</published><updated>2025-05-26T00:00:00+02:00</updated><id>http://localhost:4000/2025/05/26/ssp</id><content type="html" xml:base="http://localhost:4000/2025/05/26/ssp.html"><![CDATA[<h1 id="del-1-produktudvikling">Del 1: Produktudvikling</h1>
<h2 id="sp1">SP1</h2>
<h3 id="hvad-er-det-prim√¶re-form√•l-med-opportunity-identification-processen-og-hvad-er-de-vigtigste-output-beskriveksemplificer-hvordan-man-kan-udf√∏re-processen">Hvad er det prim√¶re form√•l med opportunity identification processen og hvad er de vigtigste output? Beskriv/eksemplificer hvordan man kan udf√∏re processen.</h3>
<p>En del af frontend, der er forkel p√• vores ide og en opportunity, Ide er en impulse, opportunity er markeds tilpasset.<br />
En god opportunity skal overkomme en kvalitets barrier.<br />
Disse opportunities kan komme internt eller eksternt fra.<br />
Opprtunity horizons.  Hensyn til Computeren<br />
Horizont 1 = Sm√• forbedringer<br />
Horizont 2 = nye l√∏sninger / teknologier, eller ramme et andet marked, som til b√∏rn.<br />
Horizont 3 = Innovative l√∏sninger, Iphone, Homeassistant, Computeren.</p>

<p>Step by step<br />
Tragt formet, tournament<br />
<strong>Step 1:</strong> Innovation Charter, / catagori<br />
Balance mellem katagori st√∏rrelse og beg√¶nsning og overskuelighed.<br />
<strong>Step 2:</strong> Idea Generation<br />
Unders√∏ge konkurrenter, nye teknologier, snakker med kunder, studerer markedet, find ulemper med nuv√¶rende product.<br />
<strong>Step 3:</strong> Screen Ideas
Fjern urimelige ideer, er dette faktisk muligt.<br />
<strong>Step 4:</strong> Uddyb gode ideer
Unders√∏ge similare produkter, estimere markedet, hvordan kan dette egentligt udf√∏res, sm√• prototyber.<br />
<strong>Step 5:</strong> Select Candidates<br />
Sammenlign mellem criterier, og kan vi faktisk lave dette.<br />
<strong>Output</strong> <br />
Key product features, business goals.</p>

<p>Hvad ved jeg at jeg ikke ved, og hvad ved jeg</p>
<h3 id="er-det-radikalt-nye-produkter-altid-det-bedste-m√•l-hvad-er-fordelen-og-ulempen-ved-radikalt-nye-produkter">Er det radikalt nye produkter altid det bedste m√•l? Hvad er fordelen og ulempen ved radikalt nye produkter?</h3>
<p>Ikke udnyttet marked, dyrer l√∏sning / mere udvikling / H√∏j risiko, ikke bevidst marked.</p>
<h2 id="sp2">SP2</h2>
<h3 id="hvad-kan-vanskeligg√∏re-indhentningen-af-customer-needs-hvorfor-er-indhentningen-af-disse-et-s√¶rligt-vigtigt-step-i-produktudviklingsprocessen">Hvad kan vanskeligg√∏re indhentningen af customer needs? Hvorfor er indhentningen af disse et s√¶rligt vigtigt step i produktudviklingsprocessen?</h3>
<p>Det er vigtigt at vide hvad kunderne har brug for, da i sidste ende er det kunderne der bestemmer om produktet skal have success.<br />
Men det kan v√¶re sv√¶rt da kunder ikke altid ved hvad de vil have, og hvem er dine kunder egentligt<br />
S√¶tter udgangspunkt for kravspecifikationen.<br />
<strong>4 steps</strong> 
<strong>Step 1</strong>  Gather Raw data<br />
Intervies, focus grupper, observering a customers(Xbox kinect), Surveys<br />
Der er forskel p√• kunder, den gennemsnitlige og elite kunder.    Jeg er elite bruger af min laptop. Pas p√• elite brugerne.
Brand loyalty.
Interview guide, hvad er milj√∏et, go with the flow, hver objektiv, probs.
Man f√•r customer statements<br />
<strong>Step 2</strong>  Interpret Data <br />
Det vi gjorde efter at have snakket med christoffer.
Omskrive og fortolke kunde statements til hvad produktet kan.
Undg√• l√∏snings mode. Undg√• must and should.
Ikke filtrer endnu.<br />
<strong>Step 3</strong>  Organise Needs <br />
Grupper statements, og sorter data.
Ikke fjern modsigende statements endnu.<br />
<strong>Step4</strong>  Prioritise Needs<br />
Prioriter p√• baggrund af hvor mange gange det er blevet sagt.</p>
<h3 id="hvilke-andre-interessenter-kunne-v√¶re-relevante-at-indhente-krav-til-produktet-fra-hvordan-vil-du-g√∏re-det">Hvilke andre interessenter kunne v√¶re relevante at indhente krav til produktet fra? Hvordan vil du g√∏re det?</h3>
<p>Konkurrenter(Hvad kan konkurrenterne), desk study,  Lego, kunden er for√¶ldre, barn er bruger.
Butikker og resellers, Hvad mener vi selv mangler intern</p>
<h2 id="sp3">SP3</h2>
<h3 id="hvilke-typer-af-modularitet-findes-der-for-en-modul√¶r-produktarkitektur-giv-et-par-eksempler-fra-konkrete-produkter">Hvilke typer af modularitet findes der for en modul√¶r produktarkitektur? Giv et par eksempler fra konkrete produkter.</h3>
<p>Platform modularitet.  Noget produkter deler kan udvikles for sig selv. F.eks VW elbil platform, s√• batterierne er ens. AMD‚Äôs Chiplets, som bruges i alle produkter, fra b√¶rbar til server.
Fuldt modul√¶r.
Semi modul√¶r (smartphones er godt eksempel)
Integral. Helt integreret.<br />
<strong>Slot-Modular</strong> (Smarphone) Ting kan connect 1 sted p√• det samlede produkt.<br />
<strong>Bus-Modular</strong> (server/desktop er lidt begge) Alt forbindes til et samlet punkt / ens interface.<br />
<strong>Sectional-Modular</strong> (Google tingen) Alle moduler er independent, Lego, ting kan stables.</p>

<h3 id="er-en-modul√¶r-produktarkitektur-altid-en-fordel-er-det-tilf√¶lde-hvor-en-integreret-arkitektur-er-en-fordel-giv-gerne-eksempler">Er en modul√¶r produktarkitektur altid en fordel? Er det tilf√¶lde hvor en integreret arkitektur er en fordel? Giv gerne eksempler.</h3>
<p>integreret architecture kan give et ‚Äúbedre‚Äù ende produkt, men kan komme med udviklings udfordringer.
Men samtidigt kan modul√¶r arkitektur g√∏re alle delene extra specialle da alle ikke beh√∏ver et overblik over hele l√∏sningen.
Mindre produkter. Modul√¶r giver et formt for overhead, ligesom Object orienteret ogs√• kan g√∏re.
eksempel (Ram slots er modul√¶re, men har h√∏jere latens og laver clock speeds).
Fordel er at man kan nemt customize til bestemt cusomer.</p>
<h2 id="sp4">SP4</h2>
<h3 id="i-kurset-har-vi-anvendt-en-screening--scoring-matrix-til-at-udv√¶lge-et-endeligt-koncept-hvad-er-styrken-ved-denne-metode-hvad-kunne-alternative-metoder-v√¶re-til-at-v√¶lge-et-koncept">I kurset har vi anvendt en ‚Äùscreening &amp; scoring‚Äù matrix til at udv√¶lge et endeligt koncept. Hvad er styrken ved denne metode? Hvad kunne alternative metoder v√¶re til at v√¶lge et koncept?</h3>
<p>Et godt koncept men d√•rligt udf√∏rt kan v√¶re sucess, men d√•rligt koncept er altid d√•rligt.<br />
Del produktet op i funktioner / behov(Bilen interrior beh√∏ves ikke at h√¶nge sammen med motoren).<br />
Blackbox, Input &amp; output, og hvad sker der s√• i denne kasse?.<br />
Hvordan bliver dette i kassen s√• gjort, teknisk specifikt. Unders√∏g eksiterende l√∏sninger, snak med experter, unders√∏g specifikke technologier.<br />
Unders√∏g internt, technologisk, og brug de egenskaber gruppe medlemmerne har.<br />
Disse koncepter kan s√• blive valgt ved screening &amp; scoring.<br />
steps = Prepare matrix - Rate - Rank - Combine(Merge nogle gode ting man opdager undervejs) - Select:<br />
Tag udgangpunkt i 1 koncept, s√¶t til lig 0, og sammenlign anre koncepter i forhold til dette.<br />
Nu kan vi v√¶gte v√¶rdierne, og derfor prioritere.<br />
Scoring og v√¶gtning kan hurtigt v√¶gte ting mod preferrencer. <br />
Det er vigtigt at have t√¶nkt over v√¶gtende, og ikke √¶ndre v√¶gtende for at prioritere andet produkt.<br />
Kr√¶ver en god analyse af features, og krav.<br />
P√• dette tidpunkt kan det v√¶re sv√¶rt at vurdere hvad man b√∏r scorer de forskellige koncepter.<br />
Alternativ, Vi begyndte at arbejde p√• forskellige ting samtidigt, og l√∏bende estimere l√∏sninger.</p>
<h3 id="hvad-kunne-du-g√∏re-for-at-√∏ge-trov√¶rdigheden-af-de-enkelte-scorer-i-matrixen">Hvad kunne du g√∏re for at √∏ge trov√¶rdigheden af de enkelte scorer i matrixen?</h3>
<p>Underst√∏tte dem med kilder og argumentationer, eller basere dem p√• customer needs unders√∏gelser.<br />
F√• kunder til at score koncepterne, og give deres mening p√• det.</p>
<h2 id="sp5">SP5</h2>
<h3 id="hvad-er-fordelene-ved-at-f√∏lge-en-struktureret-metode-til-produktudvikling-hvad-risikerer-man-ved-ikke-at-g√∏re-det">Hvad er fordelene ved at f√∏lge en struktureret metode til produktudvikling? Hvad risikerer man ved ikke at g√∏re det?</h3>
<p>Man risikerer at man ender ud med et produkt der ikke lever op til kravene, eller ikke har nogle kunder.<br />
mere‚Ä¶
SP5 ‚Äì Struktur i produktudvikling
Hvad er fordelene ved at f√∏lge en struktureret metode til produktudvikling? Hvad risikerer man ved ikke at g√∏re det?</p>

<p>Fordele:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M√•lrettethed og fokus ‚Äì En struktureret metode sikrer, at man arbejder mod klart definerede m√•l, s√•som kundebehov, tekniske krav og forretningsm√•l.

Tids- og ressourceeffektivitet ‚Äì Ved at f√∏lge faser som behovsanalyse, konceptudvikling, prototype og test undg√•r man spildarbejde.

Bedre kommunikation i teamet ‚Äì Struktur giver et f√¶lles sprog og forventningsafstemning i tv√¶rfaglige teams.

Dokumentation og l√¶ring ‚Äì Man skaber sporbarhed og mulighed for evaluering og forbedring til fremtidige projekter.

Kundecentrering ‚Äì En god metode (f.eks. Stage-Gate, V-model eller Ulrich &amp; Eppinger) inkluderer kundebehov i processen, hvilket √∏ger chancen for succes p√• markedet.
</code></pre></div></div>

<p>Risici ved ikke at f√∏lge en struktureret metode:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Udvikling af et produkt uden marked (ingen eftersp√∏rgsel).

Fejl og omarbejdning pga. manglende kravspecifikationer.

Manglende integration mellem delsystemer.

Uklare roller og ansvar ‚Üí d√•rlig teamkoordinering.

Projektet l√∏ber l√∏bsk i tid og budget. ### Hvad er nogle af de st√∏rste faldgrupper som produktudviklingsteam i forbindelse med processen? Tech-demoer i stedet for rigtige produkter
‚Äì Fokus p√• teknologi frem for brugerbehov. Det kan f√∏re til, at man laver noget "smart", som ingen har brug for.

Springe behovsanalysen over
‚Äì Mange teams g√•r direkte til l√∏sning, uden at forst√• kundens egentlige problemer. Det f√∏rer ofte til forkerte l√∏sninger.

D√•rlig kravspecifikation
‚Äì Uklare eller ikke-prioriterede krav giver konflikt senere i projektet, is√¶r ved test og implementering.

Ingen iterativ test og feedback
‚Äì Man udvikler hele produktet uden at teste det l√∏bende. S√• opdager man fejlene for sent og m√• redesigne.

Manglende involvering af relevante interessenter
‚Äì Hvis marketing, produktion eller kunder ikke inddrages, kan man ende med et produkt der er sv√¶rt at s√¶lge eller producere.

For lidt dokumentation
‚Äì Uden tilstr√¶kkelig dokumentation kan man ikke overlevere viden, og fremtidig vedligehold bliver sv√¶r.

Scope creep
‚Äì Projektets m√•l udvides hele tiden uden kontrol, s√• man mister fokus og overskrider budget og tid.
</code></pre></div></div>

<h1 id="del-2-kravsspecifikation-og-system-design">Del 2: Kravsspecifikation og system design.</h1>
<h2 id="sp6">SP6</h2>
<h3 id="hvad-er-et-use-case-diagram-hvilke-elementer-best√•r-det-af-hvad-bruger-man-det-til-hvorn√•r-anvender-man-use-case-diagrammer-tegn-eller-vis-eksempeleksempler">Hvad er et use case diagram? Hvilke elementer best√•r det af? Hvad bruger man det til? Hvorn√•r anvender man use case diagrammer? Tegn eller vis eksempel/eksempler.</h3>
<p>Hvad er et use case diagram?</p>

<p>Et use case-diagram viser akt√∏rer (brugere eller andre systemer) og deres interaktioner (use cases) med systemet. Det beskriver funktionerne (use cases), som systemet skal levere, og hvordan brugerne interagerer med dem.<br />
<strong>Hvilke elementer best√•r det af?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>System (gr√¶nse) ‚Äì Angivet som en rektangul√¶r boks, der indeholder use cases. Det er d√©t system, man beskriver.

Use case (brugssituation) ‚Äì En oval der beskriver en funktion (f.eks. "Log ind", "Bestil produkt").

Akt√∏r (actor) ‚Äì En stick-figur, der repr√¶senterer en bruger eller andet system, der interagerer med systemet.
</code></pre></div></div>

<p><strong>Relationer:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Association (linje): Forbindelse mellem akt√∏r og use case.

Include: Angiver at en use case altid inkluderer en anden.

Extend: Angiver at en use case nogle gange udvides med en anden, fx afh√¶ngigt af betingelser.
</code></pre></div></div>

<p><strong>Hvad bruger man det til?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F√• overblik over funktionelle krav til et system.

Kommunikere med interessenter (brugere, kunder, udviklere).

Dokumentere brugerbehov og systemets forventede opf√∏rsel.

Analyse og design af software og interaktionsflow.
</code></pre></div></div>

<p><strong>Hvorn√•r anvender man use case-diagrammer?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tidligt i kravspecifikationsfasen i systemudvikling.

Under analyse og design.

N√•r man vil visualisere brugerinteraktioner og sikre, at alle funktioner er d√¶kket.

Som supplement til user stories og funktionelle krav ### Hvad er en use case beskrivelse? Hvad er vigtigt i en s√•dan beskrivelse? Hvordan relaterer disse sig til krav specifikationerne? Hvorn√•r udarbejder man beskrivelserne? Hvem udarbejder dem? Giv eksempler. **Hvad er en use case-beskrivelse?**
</code></pre></div></div>

<p>En use case-beskrivelse er en tekstuel (detaljeret) beskrivelse af, hvordan en akt√∏r interagerer med systemet for at opn√• et bestemt m√•l. Hvor use case-diagrammer viser overblik, g√•r beskrivelsen i dybden med trin-for-trin scenarier.
<strong>Hvad er vigtigt i en use case-beskrivelse?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>En god use case-beskrivelse indeholder typisk f√∏lgende elementer:  
Felt	Beskrivelse  
Navn	Kort og pr√¶cis titel (f.eks. "Log ind")  
M√•l	Hvad akt√∏ren √∏nsker at opn√•  
Prim√¶r akt√∏r	Den bruger eller system der initierer use casen  
Interessenter og behov	Hvem har interesse i funktionen og hvorfor  
Foruds√¶tninger	Hvad skal v√¶re opfyldt f√∏r handlingen starter  
Efterf√∏lgende tilstand	Hvad er opn√•et, hvis use casen lykkes  
Hovedforl√∏b (normal flow)	De vigtigste trin i interaktionen  
Alternative forl√∏b / Undtagelser	Hvad sker der, hvis noget g√•r galt eller afviger  
Frekvens (valgfrit)	Hvor ofte use casen typisk forekommer   **Hvordan relaterer use case-beskrivelser sig til kravspecifikationer?**

Use case-beskrivelser konkretiserer funktionelle krav fra kravspecifikationen.

De fungerer som en slags bro mellem overordnede krav og teknisk design.

G√∏r det nemt at teste og verificere, om krav er opfyldt (basis for test cases).

Hj√¶lper med at prioritere funktionalitet baseret p√• brugerens behov.
</code></pre></div></div>

<p><strong>Hvorn√•r og af hvem udarbejdes de?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sp√∏rgsm√•l	Svar
Hvorn√•r?	I krav- og analysefasen ‚Äì gerne f√∏r design og kodning starter.
Hvem?	Typisk systemanalytikere, UX-designere, eller produktudviklere ‚Äì ofte i samarbejde med kunden eller slutbrugere.
‚úèÔ∏è Eksempel p√• use case-beskrivelse
</code></pre></div></div>

<p><strong>Use case: Bestil produkt</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M√•l: Kunden √∏nsker at bestille et produkt online.

Prim√¶r akt√∏r: Kunde

Interessenter: Kunden (hurtig levering), webshop (salg), lager (ordrebehandling)

Foruds√¶tning: Kunden er logget ind og har fundet et produkt.

Efterf√∏lgende tilstand: Ordren er registreret og bekr√¶ftet.
</code></pre></div></div>

<p>Hovedforl√∏b:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kunden klikker p√• "K√∏b" p√• produktet.

Systemet viser kurven og totalbel√∏b.

Kunden klikker p√• "G√• til betaling".

Kunden indtaster leverings- og betalingsoplysninger.

Kunden klikker "Bekr√¶ft".

Systemet validerer oplysningerne og opretter ordren.

Kunden f√•r bekr√¶ftelse p√• ordren.
</code></pre></div></div>

<p>Alternative forl√∏b:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4a. Kunden v√¶lger at betale med MobilePay.

6a. Hvis betaling mislykkes ‚Üí system viser fejl og beder om ny metode. ## SP7 ### Hvad karakteriserer gode krav? Giv eksempler p√• gode og d√•rlige krav. Hvor i V-modellen finder vi hvilke typer af krav? Med hvem udarbejder vi krav og p√• hvilke m√•de sikrer vi at vi f√•r samtlige vigtige krav med i kravspecifikationen? **Hvad karakteriserer gode krav?**
</code></pre></div></div>

<p><strong>Gode krav skal v√¶re:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kvalitet	Forklaring
Entydige	Kravet skal kun kunne forst√•s p√• √©n m√•de (ingen tvetydighed).
Testbare / Verificerbare	Det skal v√¶re muligt at afpr√∏ve, om kravet er opfyldt.
N√∏dvendige	Kun krav, der har reel v√¶rdi for systemet eller brugeren.
Tydelige og pr√¶cise	Ikke vage begreber som "hurtig", "let" eller "bedre".
Sporbare	Man skal kunne se, hvor kravet stammer fra (f.eks. en kundeanmodning).
Konsistente	Krav m√• ikke modsige hinanden.
</code></pre></div></div>

<p><strong>Eksempler p√• gode og d√•rlige krav</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D√•rligt krav	Hvorfor d√•rligt	Godt krav (forbedret)
"Systemet skal v√¶re hurtigt."	Uklart, subjektivt	"Systemet skal svare inden for 1 sekund i 95‚ÄØ% af alle tilf√¶lde."
"Brugeren skal nemt kunne oprette en profil."	Ikke m√•lbart	"Brugeren skal kunne oprette en profil via en formular med maks. 5 felter."
"Appen skal v√¶re moderne."	For vag og upr√¶cis	"Appen skal f√∏lge Android Material Design 3 retningslinjer."
</code></pre></div></div>

<p><strong>Hvor i V-modellen findes kravene?</strong></p>

<p>V-modellen beskriver systemudvikling som en proces, hvor hver fase p√• venstresiden har en tilsvarende testfase p√• h√∏jresiden. Krav findes p√• venstresiden i starten af udviklingen:
Fase i V-modellen	Type krav
Brugerbehov (toppen)	Overordnede forretnings- og brugerkrav
Systemkrav	Funktionelle og ikke-funktionelle krav
Designkrav	Tekniske specifikationer for hvordan kravene opfyldes</p>

<p>P√• h√∏jresiden verificeres kravene gennem test: systemtest, integrationstest, enhedstest ‚Äì baseret direkte p√• kravene.
<strong>Med hvem udarbejder vi krav?</strong></p>

<p>Krav udarbejdes i samarbejde med:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Slutbrugere / kunder ‚Äì deres behov og √∏nsker er fundamentale.

Forretningsanalytikere / produktledere ‚Äì overs√¶tter behov til krav.

Udviklere / arkitekter ‚Äì vurderer realiserbarhed.

Testere ‚Äì sikrer at krav kan testes.

UX-designere ‚Äì bidrager til brugervenlighedskrav.
</code></pre></div></div>

<p>Hvordan sikrer vi, at vi f√•r alle vigtige krav med?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Workshops &amp; interviews med interessenter.

Observationer &amp; kontekstuel analyse ‚Äì se hvordan nuv√¶rende systemer bruges.

Brainstorming og kravindsamlingsteknikker (f.eks. MoSCoW, Kano).

Use cases og user stories ‚Äì hj√¶lper med at identificere funktionelle krav.

Prototyper og mockups ‚Äì skaber feedback og afd√¶kker oversete krav.

Sporbarhedsmatrix ‚Äì kobler krav til test, design og forretningsm√•l. ### Hvilke krav har vi til vores kravspecifikation? Hvordan sikrer vi at krav til krav er opfyldt? Hvordan bruger vi krav i efterf√∏lgende udviklingsproces? Hvordan forholder vi os til at skulle lave √¶ndringer i krav i de efterf√∏lgende tidsperioder i en udviklingsproces f.eks. hen mod slutningen af projektet? Giv eksempler. Hvilke krav har vi til vores kravspecifikation?
</code></pre></div></div>

<p><strong>En kravspecifikation skal v√¶re:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Krav til kravspecifikationen	Beskrivelse
Komplet	Alle relevante funktionelle og ikke-funktionelle krav skal v√¶re med.
Entydig	Hvert krav skal kun kunne forst√•s p√• √©n m√•de.
Testbar	Det skal v√¶re muligt at verificere hvert krav.
Sporbar	Hvert krav skal kunne spores til kilder (behov, interessenter) og til test, design og kode.
Struktureret og prioriteret	Kravene skal v√¶re velorganiserede og eventuelt prioriteret (f.eks. MoSCoW: Must, Should, Could, Won‚Äôt).
Versionsstyret	Man skal kunne f√∏lge √¶ndringer over tid (hvem √¶ndrede hvad og hvorn√•r). **Hvordan sikrer vi, at ‚Äúkrav til krav‚Äù er opfyldt?**

Review og godkendelse
‚Äì Gennemg√• kravene med interessenter og f√• dem godkendt. Brug evt. checklister (f.eks. IEEE-830).

Sporbarhedsmatrix
‚Äì Kortl√¶g alle krav til relaterede designbeslutninger og testcases.

Brug af skabeloner og v√¶rkt√∏jer
‚Äì Kravspecificeringsv√¶rkt√∏jer (f.eks. Jira, IBM DOORS) hj√¶lper med konsistens, dokumentation og versionsstyring.

Testbarhedsanalyse
‚Äì Involv√©r testere tidligt: ‚ÄúKan dette krav testes?‚Äù Hvis ikke, skal det omskrives.

Roller og ansvar
‚Äì Tydelige ejere af kravene sikrer ansvar for indhold og √¶ndringer.
</code></pre></div></div>

<p><strong>Hvordan bruger vi krav i den efterf√∏lgende udviklingsproces?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kravene er fundamentet for hele udviklingsprocessen:
Procesfase	Brug af krav
Design	Udviklere og arkitekter bruger krav til at beslutte systemets struktur og komponenter.
Implementering	Kode baseres p√• funktionelle krav.
Test	Testcases laves ud fra krav (accepttest, systemtest).
Verifikation og validering	Bruges til at afg√∏re, om det udviklede system matcher krav og behov.
Dokumentation og overlevering	Krav dokumenterer, hvad systemet skal kunne ‚Äì bruges til support og videreudvikling. **Hvordan h√•ndterer vi √¶ndringer i krav sent i udviklingsforl√∏bet?**
</code></pre></div></div>

<p>√Ündringer sker ofte ‚Äì men sent i processen er de dyrere og risikofyldte.
S√•dan h√•ndteres det:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Change Request-proces
‚Äì Formaliseret m√•de at foresl√•, evaluere og godkende √¶ndringer.

Impact analysis
‚Äì Hvad p√•virker √¶ndringen? Tid, test, funktionalitet, afh√¶ngigheder? Dette vurderes f√∏r godkendelse.

Sporbarhed
‚Äì Man kan hurtigt identificere, hvilke komponenter og testcases der ber√∏res.

Kommunikation
‚Äì Inform√©r hele teamet om √¶ndringer (dev, test, design, kunde).

Agile eller iterativ udvikling
‚Äì Hvis muligt: arbejd i iterationer, s√• krav kan justeres l√∏bende med mindre risiko.
</code></pre></div></div>

<p><strong>Eksempler p√• √¶ndringer i krav og deres konsekvenser</strong><br />
√Ündring i krav	Konsekvens	H√•ndtering
‚ÄúBrugeren skal kunne betale med MobilePay‚Äù tilf√∏jes sent	Integration med ny betalingsgateway ‚Üí ekstra udvikling og test	Change request, teknisk vurdering, planjustering<br />
√Ündring af svartid fra 2 sek til 0.5 sek	Kr√¶ver optimering af backend og database	Reprioritering af performancefokus, evt. delvis opfyldelse<br />
Krav om at systemet skal virke offline	√Ündrer hele arkitekturen	Overvej version 2, lav business case for v√¶rdi/kost</p>
<h2 id="sp8">SP8</h2>
<h3 id="hvordan-deler-man-effektivt-krav-op-i-funktionelle-moduler-hvad-definerer-et-modul-hvad-kan-vi-bruge-modulariseringen-til-giv-eksempler-gerne-p√•-tavle">Hvordan deler man effektivt krav op i funktionelle moduler? Hvad definerer et modul? Hvad kan vi bruge modulariseringen til? Giv eksempler, gerne p√• tavle.</h3>
<p><strong>Hvordan deler man krav op i funktionelle moduler?</strong><br />
<strong>Grundid√©:</strong></p>

<p>Du opdeler systemet i mindre funktionelle enheder (moduler), som hver is√¶r d√¶kker √©t specifikt omr√•de af funktionaliteten.
<strong>Metode:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Identific√©r hovedfunktioner / use cases
‚Äì Hvad skal systemet kunne?

Grupp√©r relaterede krav
‚Äì Krav, der h√∏rer sammen funktionelt, samles.

Opdel efter ansvar og gr√¶nseflader
‚Äì Hvert modul skal have et klart ansvar og minimalt overlap.

Overvej brugerroller og systemakt√∏rer
‚Äì Hvad har forskellige brugere brug for at g√∏re? Dette guider opdelingen.
</code></pre></div></div>

<p><strong>Hvad definerer et modul?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Et modul er:
Egenskab	Forklaring
Afgr√¶nset funktionelt omr√•de	L√∏ser √©n tydelig opgave (f.eks. "Brugerh√•ndtering")
Indeholder relaterede krav og funktioner	F.eks. "Login", "Opret bruger", "Nulstil adgangskode"
Har en veldefineret gr√¶nseflade (API eller UI)	Moduler kommunikerer gennem veldefinerede kald eller sk√¶rme
Kan udvikles og testes uafh√¶ngigt	G√∏r teams mere effektive og reducerer kompleksitet
</code></pre></div></div>

<p><strong>Hvad kan vi bruge modularisering til?</strong>
Fordel	Beskrivelse<br />
‚úÖ Overblik	Krav bliver lettere at forst√• og styre<br />
‚úÖ Genbrug	Moduler kan genbruges i andre projekter<br />
‚úÖ Parallelt arbejde	Teams kan arbejde p√• forskellige moduler samtidigt<br />
‚úÖ Fejlisolering	Fejl lokaliseres hurtigere<br />
‚úÖ √Ündringer bliver lettere	√Ündringer i √©t modul p√•virker ikke hele systemet<br />
‚úÖ Skalerbarhed	Systemet kan lettere vokse med nye funktioner</p>
<h3 id="hvad-er-en-gr√¶nseflade-hvordan-bliver-man-enig-om-en-gr√¶nseflade-hvem-er-involveret-i-at-definere-gr√¶nseflader-hvilke-fordeleulemper-er-der-ved-at-definere-gr√¶nseflader-tidligtsent-i-et-projektforl√∏b-giv-eksempler">Hvad er en gr√¶nseflade? Hvordan bliver man enig om en gr√¶nseflade? Hvem er involveret i at definere gr√¶nseflader? Hvilke fordele/ulemper er der ved at definere gr√¶nseflader tidligt/sent i et projektforl√∏b? Giv eksempler</h3>

<p><strong>Typer af gr√¶nseflader:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type	Eksempel
Teknisk gr√¶nseflade	API mellem backend og frontend
Fysisk gr√¶nseflade	Stikforbindelse, sk√¶rm, knap
Brugergr√¶nseflade (UI)	App-sk√¶rmbilleder, menuer, formularer
Procesgr√¶nseflade	Overlevering mellem to teams eller systemer i et workflow **Hvordan bliver man enig om en gr√¶nseflade?**

Identific√©r behov og afh√¶ngigheder
‚Äì Hvad har de to parter brug for fra hinanden?

Samarbejde og kommunikation
‚Äì Design, software, hardware, test og brugerrepr√¶sentanter skal involveres.

Brug specifikationer og diagrammer
‚Äì Brug f.eks.:

    Interface-specifikationer (API-dokumenter, wireframes)

    Sekvensdiagrammer, I/O-skemaer

Prototyper og mockups
‚Äì Visualisering af interaktion hj√¶lper parterne med at forst√• gr√¶nsefladen.
</code></pre></div></div>

<p><strong>Hvem er involveret i at definere gr√¶nseflader?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rolle	Bidrag
Systemarkitekt	Fastl√¶gger overordnede tekniske gr√¶nseflader
Softwareudviklere	Definerer f.eks. API‚Äôer mellem komponenter
Hardwareudviklere	Ved fysiske gr√¶nseflader (sensorer, knapper, porte)
UX-designere	Ved brugergr√¶nseflader (UI)
Testere	Sikrer at gr√¶nsefladen kan testes og valideres
Kunder/brugere	Ved brugerinteraktion eller systemintegration
‚è±Ô∏è Fordele og ulemper ved tidlig/sen definition
Timing	Fordele	Ulemper
Tidlig	- G√∏r parallel udvikling muligt
- Giver klar struktur
- Giver testmuligheder tidligere	- Risiko for √¶ndringer senere
- Kan l√•se fast i et forkert design
Sen	- Mere viden og erfaring
- Bedre tilpasning til reelle behov	- Forsinker udvikling
- Skaber afh√¶ngigheder og flaskehalse
- √òget risiko for misforst√•elser **Eksempler** **Teknisk eksempel (software):**

Et API mellem en webshop-frontend og backend:

    Gr√¶nsefladen definerer kald som: GET /products, POST /checkout

    Frontend- og backendteams arbejder parallelt, fordi gr√¶nsefladen er defineret tidligt
</code></pre></div></div>

<p><strong>Fysisk eksempel (produktdesign):</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>En elektrisk motor med en standardiseret stikforbindelse til styring:

    Gr√¶nsefladen er stiktypen + datasignaler

    Motor og styringsmodul kan udvikles hver for sig
</code></pre></div></div>

<p><strong>Brugergr√¶nseflade:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>En app har et loginmodul, som leverer brugerinfo til resten af systemet

    UI og backend skal blive enige om: Hvilke felter vises? Hvad sendes?
</code></pre></div></div>

<h1 id="del-3-implementering-og-test">Del 3: Implementering og test</h1>
<h2 id="sp9">SP9</h2>
<h3 id="hvad-er-kodestil-og-kodestruktur-for-hvem-er-dette-vigtigt-hvad-har-i-gjort-i-jeres-projekt-hvordan-bliver-man-enige-om-feks-brug-af-white-space-eller-tabs-giv-eksempler-p√•-forskellige-kodestilarter-der-kan-√∏ge-l√¶sevenligheden-og-eksempler-p√•-det-modsatte-der-mindsker-l√¶sevenligheden">Hvad er kodestil og kodestruktur? For hvem er dette vigtigt? Hvad har I gjort i jeres projekt? Hvordan bliver man enige om f.eks. brug af white space eller tab‚Äôs? Giv eksempler p√• forskellige kodestilarter der kan √∏ge l√¶sevenligheden, og eksempler p√• det modsatte (der mindsker l√¶sevenligheden).</h3>
<p><strong>Hvad er kodestil og kodestruktur?</strong>
<strong>Kodestil</strong></p>

<p>Kodestil handler om hvordan koden ser ud ‚Äì det visuelle og sproglige udtryk. Det d√¶kker fx:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Brug af indrykning (tabs vs. spaces)

Navngivning af variabler og funktioner (camelCase, snake_case)

Brug af mellemrum og linjeskift

Kommentarstil og placering

Placering af {} i funktioner og kontrolstrukturer
</code></pre></div></div>

<p>Eksempel p√• to forskellige kodestile i JavaScript:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Kodestil 1 (kompakt, men lidt sv√¶rere at l√¶se)
function add(a,b){return a+b;}

// Kodestil 2 (mere l√¶sbar)
function add(a, b) {
  return a + b;
}
</code></pre></div></div>

<p><strong>Kodestruktur</strong></p>

<p>Kodestruktur handler om hvordan koden er organiseret logisk:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Filstruktur (mappestruktur)

Moduler og komponenter

Funktionsopdeling (sm√•, genanvendelige funktioner)

Separation of concerns (logik adskilt fra pr√¶sentation og data)
</code></pre></div></div>

<p>Eksempel:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>projekt/
‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îî‚îÄ‚îÄ userController.js
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ userModel.js
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îî‚îÄ‚îÄ userRoutes.js
‚îî‚îÄ‚îÄ app.js
</code></pre></div></div>

<p><strong>For hvem er dette vigtigt?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>For hele teamet: Giver f√¶lles sprog og f√¶rre misforst√•elser.

For fremtidige udviklere: Koden bliver nemmere at vedligeholde.

For review og samarbejde: G√∏r kodegennemgang hurtigere og mere effektiv.

For test og debugging: En ensartet stil g√∏r det nemmere at finde fejl.
</code></pre></div></div>

<p>üí¨ Hvordan bliver man enige om stil (fx tabs vs. spaces)?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>L√¶g f√¶lles retningslinjer fra starten:

    Brug fx Google Style Guide, Airbnb JS Guide, PEP8 (Python) osv.

Automatis√©r med linters og formateringsv√¶rkt√∏jer:

    Eksempler: ESLint, Prettier, Black (Python), clang-format

Lav en README.md eller CONTRIBUTING.md med stilregler

Brug Git pre-commit hooks til at tjekke stil f√∏r kode pushes
</code></pre></div></div>

<p>‚úÖ Eksempler p√• god kodestil (l√¶sevenlig)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def calculate_total(price, tax_rate):
    """Calculate total price including tax."""
    return price * (1 + tax_rate)

Klar funktion

Gode navne

Kommentar (docstring)

Lige mellemrum
</code></pre></div></div>

<p>‚ùå Eksempler p√• d√•rlig kodestil (ul√¶selig)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def ct(p,t):return p*(1+t)

D√•rlige navne

Ingen mellemrum

Ingen kommentar

Alt p√• √©n linje kamelCase, navngivning, function st√∏rrelse, nasa's krav. Vi havde b√•de python og C++, python blev tjekket via github action, c++ var mere skrevet s√• det man skrev lignede det der allerede stod. Manglede generelt m√•ske lidt konsistens. ### Hvad er objekt orienteret programmering? Hvad er en klasse i forhold til et objekt? Hvad er et klassediagram? Tegn gerne et simpelt et p√• tavlen og diskuter ud fra det tegnede diagram. **Hvad er objektorienteret programmering (OOP)?**
</code></pre></div></div>

<p>Objektorienteret programmering er en programmeringsparadigme, hvor man strukturerer kode omkring objekter, som repr√¶senterer ting, begreber eller enheder i virkeligheden.
<strong>N√∏gleprincipper i OOP:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Princip	Forklaring
Indkapsling	Data og funktioner gemmes sammen i objekter
Arv	En klasse kan arve egenskaber fra en anden
Polymorfi	Objekter kan opf√∏re sig forskelligt, selvom de deler samme interface
Abstraktion	Skjuler kompleksitet og viser kun n√∏dvendig information **Hvad er en klasse og et objekt?**
Begreb	Forklaring
Klasse	En skabelon eller blueprint for at lave objekter
Objekt	En konkret instans af en klasse med sine egne data
</code></pre></div></div>

<p>Eksempel i Python:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Dog:               # Klasse
    def __init__(self, name):
        self.name = name

    def bark(self):
        print(f"{self.name} says woof!")

my_dog = Dog("Fido")     # Objekt (instans af klassen)
my_dog.bark()            # Output: Fido says woof!
</code></pre></div></div>

<p><strong>Hvad er et klassediagram?</strong></p>

<p>Et klassediagram er en grafisk m√•de at vise klasser og deres relationer p√•. Det er en del af UML (Unified Modeling Language) og bruges i designfasen.
Klassediagrammet viser:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Klasser

Attributter (datafelter)

Metoder (funktioner)

Relationer mellem klasser (arv, association, komposition osv.)
</code></pre></div></div>

<p>Tegn et simpelt klassediagram p√• tavlen
Eksempel: Et system med Person og Student</p>

<p>+‚Äî‚Äî‚Äî‚Äî‚Äì+
|   Person     |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
| - name       |
| - age        |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
| + greet()    |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
       ‚ñ≤
       |
   inherits
       |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
|   Student    |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
| - studentID  |
+‚Äî‚Äî‚Äî‚Äî‚Äì+
| + study()    |
+‚Äî‚Äî‚Äî‚Äî‚Äì+</p>

<p>Forklaring:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Person er en superklasse

Student arver fra Person

Student har en ekstra attribut og metode

greet() findes i Person og kan bruges af Student ## SP10 ### Hvad er white boks test? Hvorn√•r anvender vi white boks test og i hvilke sammenh√¶ng. Hvad er en path test og hvorfor er en 100% path testing stort set altid umulig at gennemf√∏re? Tegn et flowgraph diagram p√• tavlen og forklar hvad en branch test er **Hvad er white-box test?**
</code></pre></div></div>

<p>White-box test (eller strukturtest) er en testmetode, hvor man tester et programs interne struktur og logik. Man kigger ‚Äùind i koden‚Äù og bruger sin viden om, hvordan programmet er bygget.
<strong>Form√•let:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Teste alle logiske grene og kontrolstrukturer

Sikre at alle veje i koden fungerer som forventet

Afsl√∏re fx:

    Ubrugte kodelinjer

    Fejl i loops og betingelser

    Forkert h√•ndtering af kanttilf√¶lde
</code></pre></div></div>

<p><strong>Hvorn√•r bruger man white-box testing ‚Äì og i hvilke sammenh√¶nge?</strong>
Bruges typisk ved	Eksempler<br />
Unit testing	Test af enkeltfunktioner<br />
Integration testing	N√•r moduler integreres og man vil teste flow mellem dem<br />
Ved kritisk kode	F.eks. sikkerhed, beregning, pengeoverf√∏rsel<br />
Automatiseret test	Fx med v√¶rkt√∏jer som JUnit, Pytest, osv.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>White-box testing bruges tidligt i udviklingen af udviklere og QA, og supplerer black-box tests (som kun ser p√• input/output uden at kende koden).
</code></pre></div></div>

<p><strong>Hvad er path testing?</strong></p>

<p>Path testing handler om at teste forskellige stier igennem et program ‚Äì alts√• de mulige k√∏rselsforl√∏b gennem kontrolstrukturen.<br />
Eksempel:</p>

<p>Hvis en funktion har en if-else og et while-loop, kan der v√¶re mange forskellige m√•der, koden kan k√∏res p√• afh√¶ngigt af input.<br />
Hvorfor er 100% path testing n√¶sten umuligt?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Antallet af mulige stier vokser eksponentielt med antal beslutninger

Nogle stier kan v√¶re umulige at n√• pga. logik

Loops med forskellige antal gentagelser giver uendelige kombinationer

Det ville kr√¶ve enormt mange testcases og v√¶re for tidskr√¶vende
</code></pre></div></div>

<p><strong>Hvad er en branch test?</strong></p>

<p>Branch testing er en simplere form for path testing:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Her tester man, at alle grene (branches) i programmet bliver k√∏rt mindst √©n gang

Dvs. hver if, else, case, while, osv. bliver aktiveret i en test
</code></pre></div></div>

<p>Branch testing sikrer, at alle beslutningspunkter i programmet testes.<br />
Tegn et simpelt flowgraph diagram (til tavle):<br />
Kodeeksempel:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def check(value):
    if value &gt; 0:
        print("Positive")
    else:
        print("Non-positive")
</code></pre></div></div>

<p>Flowgraph diagram:</p>

<p>[Start]
      |
     (1)
      |
    [value &gt; 0]
     /     <br />
   (2)     (3)
   |        |
[print P] [print NP]
   \       /
    (4) [Slut]</p>

<p>Forklaring:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1): Start af funktion

(2): Gren for value &gt; 0

(3): Gren for else

(4): Samlet slutpunkt

For branch test skal du have mindst:

    √ât test input hvor value &gt; 0

    √ât test input hvor value &lt;= 0 ### Hvad er debugning? Hvordan bruger man en debugger (princippet)? Hvorn√•r bruger man en debugger? Forklar ud fra et af de tre kodestumper givet p√• moodle, hvordan du vil white boks teste koden. Vis gerne p√• laptop hvis du har den med. **Hvad er debugging?**
</code></pre></div></div>

<p>Debugging er processen, hvor man finder og retter fejl (bugs) i sin kode. Det kan b√•de v√¶re syntaksfejl, logiske fejl, runtime-fejl eller uventet adf√¶rd.
<strong>M√•let:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Forst√• hvor og hvorfor noget g√•r galt

Identificere √•rsagen og ikke kun symptomet

Lave rettelser, s√• koden opf√∏rer sig korrekt
</code></pre></div></div>

<p><strong>Hvordan bruger man en debugger? (princip)</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>En debugger er et v√¶rkt√∏j, der g√∏r det muligt at k√∏re koden trin for trin, observere v√¶rdier og inds√¶tte breakpoints.
Typiske funktioner i en debugger:
Funktion	Beskrivelse
Breakpoint	Pause i koden ‚Äì her stopper eksekveringen
Step over	K√∏rer n√¶ste linje kode, men hopper over funktionkald
Step into	G√•r ind i en funktion og viser dens kode
Step out	Hopper ud af en funktion igen
Watch/Inspect	Se v√¶rdien af variabler live
Call stack	Viser hvilke funktioner, der er kaldt, og i hvilken r√¶kkef√∏lge
Debuggere findes i fx:

VS Code, PyCharm, Eclipse, Xcode

Indbygget i browserens devtools (til JS)

CLI (fx pdb i Python, gdb i C)
</code></pre></div></div>

<p><strong>Hvorn√•r bruger man en debugger?</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Situation	Eksempel
N√•r programmet crasher uden tydelig √•rsag	Segfault, NoneType error
N√•r noget opf√∏rer sig forkert	En funktion returnerer et forkert resultat
N√•r man vil forst√• andres eller egen kompleks kode	Trinvis analyse
Ved white-box testing	N√•r man systematisk tester kontrolstrukturer ## SP11 ### Hvad er en black box test? Forklar princippet bag black box tests. Er det realistisk at risikere at en komplet test skal gennemf√∏re 10^100 kombinationsmuligheder af input v√¶rdier ‚Äì hvorfor/hvorfor ikke? Antag det er, hvordan sikrer du s√• at testen kan gennemf√∏res p√• realistisk kort tid? Argumenter for hvorfor din metode vil v√¶re bullet-proof. Ved sidste sp√∏rgsm√•l, tag gerne udgangspunkt i en l√∏sning fra opgave 1. **Hvad er en Black Box Test?**
</code></pre></div></div>

<p>Black box test (ogs√• kaldet funktionsbaseret test) er en testmetode, hvor du tester systemets funktionalitet udefra ‚Äì alts√• uden at kende den interne kode eller struktur.<br />
<strong>Princippet bag black box testing</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fokus er p√• input og output: Giver systemet det rigtige output for det givne input?

Tester typisk:

    Funktionalitetskrav

    Brugerinteraktion

    Gr√¶nsev√¶rdier

    Fejlh√•ndtering **Du skriver testcases baseret p√• kravspecifikationen og tester, om programmet opf√∏rer sig som forventet.**     **Er 10^100 kombinationsmuligheder ‚Äì realistisk?**  
</code></pre></div></div>

<p>Nej, det er komplet urealistisk.</p>

<p>Et eksempel:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Forestil dig et system der tager 100 inputfelter, og hvert felt kan have 10 v√¶rdier ‚Üí 1010010100 kombinationer = mere end antallet af atomer i universet.
</code></pre></div></div>

<p><strong>S√•:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Det er umuligt at teste alle kombinationer

Det vil tage uendelig lang tid og regnekraft
</code></pre></div></div>

<p><strong>‚úÖ Hvordan tester vi alligevel p√• realistisk tid?</strong></p>

<p>Ved at bruge strategiske metoder:</p>
<ol>
  <li>
    <p>√Ükvivalensklasser</p>

    <p>Del input i grupper, hvor du forventer samme adf√¶rd</p>

    <p>Test kun √©n v√¶rdi pr. gruppe</p>
  </li>
</ol>

<p>üîß Eksempel: Hvis alder skal v√¶re 18‚Äì100, s√• test:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Undergr√¶nse: 17 (ulovlig)

Gyldig: 25

Overgr√¶nse: 101 (ulovlig)
</code></pre></div></div>

<ol>
  <li>
    <p>Gr√¶nsev√¶rditest (Boundary Value Analysis)</p>

    <p>Fejl sker oftest ved gr√¶nser, fx 0, 1, max</p>

    <p>Test fx v√¶rdier: min-1, min, min+1, max-1, max, max+1</p>
  </li>
  <li>
    <p>Fejlspekulation / Edge cases</p>

    <p>Brug erfaring og viden om typiske fejl</p>

    <p>Eksempler: tom input, null, ekstremt store/sm√• tal</p>
  </li>
  <li>
    <p>Risiko-baseret test</p>

    <p>Priorit√©r test p√• funktioner der er forretningskritiske eller fejl-udsatte</p>
  </li>
</ol>

<p>üõ°Ô∏è Argument: Hvorfor er dette ‚Äúbulletproof‚Äù?</p>

<p>Det er ikke muligt at sikre 100% korrekthed i alle situationer, men:</p>

<p>‚úÖ Disse metoder minimerer risikoen for kritiske fejl
‚úÖ De fokuserer indsatsen p√• de vigtigste og mest fejl-udsatte omr√•der
‚úÖ De g√∏r det muligt at teste hurtigt og effektivt med h√∏j d√¶kning
‚úÖ Kombineret med white-box tests, f√•r du b√•de intern og ekstern testd√¶kning
üß™ Eksempel: BubbleSort fra opgave 1</p>

<p>Krav:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BubbleSort skal sortere listen i stigende orden
</code></pre></div></div>

<p>Black box test cases:
Test Case	Input	Forventet Output
Tom liste	[]	[]
√ân v√¶rdi	[5]	[5]
Allerede sorteret	[1, 2, 3]	[1, 2, 3]
Omvendt sorteret	[3, 2, 1]	[1, 2, 3]
Dobbeltv√¶rdier	[2, 2, 1]	[1, 2, 2]</p>

<p>‚ö†Ô∏è Bem√¶rk: Her kender vi ikke hvordan koden er lavet (black box), men vi ved hvordan den skal opf√∏re sig.</p>
<h3 id="hvis-noget-kode-ser-ud-til-at-virke-er-du-s√•-helt-sikker-hvordan-sikrer-du-dig-at-du-ogs√•-vil-have-den-kode-til-at-v√¶re-ansvarlig-for-n√¶ste-flytur-du-selv-skal-p√•-beskriv-hvordan-du-fandt-fejlen-i-det-kode-der-blev-givet-i-opgave-2-er-du-sikker-p√•-du-fandt-alle-fejl-argumenter-hvorfor-du-er-sikke">Hvis noget kode ser ud til at virke, er du s√• helt sikker? Hvordan sikrer du dig, at du ogs√• vil have den kode til at v√¶re ansvarlig for n√¶ste flytur du selv skal p√•? Beskriv hvordan du fandt fejlen i det kode der blev givet i opgave 2. Er du sikker p√• du fandt ALLE fejl? Argumenter hvorfor du er sikke</h3>
<p><strong>Hvis noget kode ser ud til at virke ‚Äì er man s√• helt sikker?</strong></p>

<p>Nej ‚Äì aldrig.</p>

<p>At koden ser ud til at virke, betyder kun, at den virker i de tilf√¶lde, du har testet den.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Men hvad med alle de utestede situationer, inputkombinationer, kanttilf√¶lde eller fejlscenarier?
</code></pre></div></div>

<p>N√•r det handler om kritiske systemer, som fx en flyver, s√• er ‚Äúdet virker p√• min maskine‚Äù ikke godt nok.
‚úÖ Hvordan sikrer man sig kvalitet og sikkerhed?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Grundig test:

    Brug b√•de black box og white box tests

    Test gr√¶nsetilf√¶lde, fejlscenarier, store input, tomme input, uventede input

Code review:

    Flere √∏jne opdager flere fejl

    Du f√•r feedback p√• b√•de logik og struktur

Statisk analyse:

    Brug v√¶rkt√∏jer der automatisk analyserer koden for potentielle fejl (f.eks. pylint, mypy, flake8)

Formal verification (i kritiske systemer):

    Matematiske beviser for at koden opf√∏rer sig korrekt

Test coverage:

    Hvor meget af koden bliver faktisk ramt af tests? (Fx med coverage.py)
</code></pre></div></div>

<p>üêõ Hvordan fandt vi fejlene i opgave 2?</p>

<p>Vi gennemgik koden linje for linje, og:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Brugte white-box teknik til at se p√• intern logik

Spottede:

    Forkert abs(...) brugt i sammenligning

    Forkert initialisering og opdatering af swapped i bubble sort

    Logiske fejl i rekursiv tilgang ‚Üí risiko for uendelig l√∏kke

    Misforst√•else af sorteringsretning

    Manglende input() validering
</code></pre></div></div>

<p>‚ùìEr vi sikre p√•, at vi har fundet ALLE fejl?</p>

<p>Nej ‚Äì men vi har reduceret risikoen betydeligt.</p>

<p>Vi kan ikke 100% garantere, at der aldrig er fejl. Der kan stadig v√¶re:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edge cases vi ikke har testet

Performance-problemer p√• store inputs

Fejl ved flydende tal, NaN, inf, etc.
</code></pre></div></div>

<p>Men:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vi har anvendt systematiske metoder

Vi har lavet grundige test og kontrol

Og vi har lavet logiske forbedringer i strukturen
</code></pre></div></div>

<p>Det g√∏r os trygge ved funktionaliteten, men vi ville stadig ikke bruge det i en flyver uden meget mere test og certificering.
üß† Konklusion</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>At v√¶re professionel udvikler betyder ikke at ‚Äútro‚Äù koden virker ‚Äì det betyder at dokumentere og teste, indtil man ved, at den virker ‚Äî i hvert fald under de definerede krav og foruds√¶tninger.
</code></pre></div></div>]]></content><author><name>Esben J√∏rgensen</name></author><summary type="html"><![CDATA[Del 1: Produktudvikling SP1 Hvad er det prim√¶re form√•l med opportunity identification processen og hvad er de vigtigste output? Beskriv/eksemplificer hvordan man kan udf√∏re processen. En del af frontend, der er forkel p√• vores ide og en opportunity, Ide er en impulse, opportunity er markeds tilpasset. En god opportunity skal overkomme en kvalitets barrier. Disse opportunities kan komme internt eller eksternt fra. Opprtunity horizons. Hensyn til Computeren Horizont 1 = Sm√• forbedringer Horizont 2 = nye l√∏sninger / teknologier, eller ramme et andet marked, som til b√∏rn. Horizont 3 = Innovative l√∏sninger, Iphone, Homeassistant, Computeren.]]></summary></entry><entry><title type="html">Sipeed Maix Dock M1W</title><link href="http://localhost:4000/blog/2025/05/24/setup.html" rel="alternate" type="text/html" title="Sipeed Maix Dock M1W" /><published>2025-05-24T00:00:00+02:00</published><updated>2025-05-24T00:00:00+02:00</updated><id>http://localhost:4000/blog/2025/05/24/setup</id><content type="html" xml:base="http://localhost:4000/blog/2025/05/24/setup.html"><![CDATA[<h1 id="what-is-the-maix-dock-m1w">What is the Maix Dock M1W?</h1>
<p><img src="/assets/Maix-dock.jpg" alt="Maix Dock M1W" style="width:60%;" /></p>

<p>The Maix Dock M1W is a small RISC-V based Micro-controller, with the main point of interest being the integrated NPU called KPU. 
The board is based around the Kendryte K210 chip, which comes with 2 64bit RICS-V cores clocked at 400MHz and a dedicated NPU. 
The NPU is marketed with the ability to perform 1TOPS at INT8 precision.<br />
This makes the M1W an interresting product for low-power object detection.</p>

<p>The specifictions for the M1W is as follows:<br />
<em>With ESP32-WROOM for comparision</em></p>

<table>
    <tr>
        <th>Item</th>
        <th>M1W / K210</th>
        <th>ESP32</th>
    </tr>
    <tr>
    <td>CPU:</td>
        <td>
            <p>Dual-core 64bit risc-v / 400MHz</p>
            <p> (double-precision FPU integration)</p>
        </td>
        <td>Dual-core 32bit Xtensa LX6 / 240MHz</td>
    </tr>
    <tr>
        <td>Memory:</td>
        <td> 8Mib 64bit on-chip SRAM </td>
        <td> 520Kib 32bit on-chip SRAM</td>
    </tr>
    <tr>
        <td>NPU / KPU:</td>
        <td> 1TOPS of INT8 multiplication</td>
        <td> No NPU</td>
    </tr>
    <tr>
        <td>Storage:</td>
        <td>16MiB Flash, support micro SDXC expansion storage (max 128GB)</td>
        <td>16MiB Flash</td>
    </tr>
    <tr>
        <td> WIFI: </td>
        <td> MaixDock (M1W) uses M1W (integrated ESP8285 2.4GHz WIFI SOC)</td>
        <td> ESP32 comes with integrated 2.4GHz WIFI</td>
    </tr>
    <tr>
        <td> Screen (package): </td>
        <td> 2.4 inch TFT, screen resolution: 320*240</td>
        <td> Depends on kit</td>
    </tr>
    <tr>
        <td> Camera (package):</td>
        <td> 30W pixel GC0328 camera </td>
        <td> Depends on kit</td>
    </tr>
    <tr>
        <td> TF card slot:</td>
        <td> Multimedia resource expansion, support large-capacity storage</td>
        <td> Depends on kit</td>
    </tr>
</table>

<h1 id="m1w-unboxing">M1W Unboxing</h1>
<p>I ordered the M1W from Aliexpress and it arrived in a small cardboard box with a plastic enclosure containing: the M1W itself, the 2.4 inch screen, a small camera already attached, an antenna and a USB-C  to Micro-b adapter.<br />
<img src="/assets/M1W-unbloxed.png" alt="Platic enclosure" style="width:100%;" /></p>
<h1 id="m1w-initial-power-on">M1W Initial Power On</h1>
<p>An inital power on of the M1W originally showed a welcome MaixDuino welcome message on the display, but when trying to recreate it for a picture the display only shows white</p>

<p><img src="/assets/M1W-White.png" alt="Platic enclosure" style="width:100%;" /></p>
<h1 id="programming-on-the-m1w">Programming on the M1W</h1>
<p>When trying to find guides for the M1W especially for programming low-level C code, most links from official sources are either on chinese or points to non existent pages. 
However, Platformio has the M1W-board listed as <em>sipeed-maix-one-dock</em>, and is compatible with the arduino framework.<br />
So for an easy test I wrote a simple script making the builtin led blink.  SUCCESS!!!<br />
The <em>platformio.ini</em> and <em>main.cpp</em> code can be seen below</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#platformio.ini</span>

    <span class="p">[</span><span class="n">env</span><span class="ss">:sipeed</span><span class="o">-</span><span class="n">maixduino</span><span class="p">]</span>
    <span class="n">platform</span> <span class="o">=</span> <span class="n">kendryte210</span>
    <span class="n">board</span> <span class="o">=</span> <span class="n">sipeed</span><span class="o">-</span><span class="n">maix</span><span class="o">-</span><span class="n">one</span><span class="o">-</span><span class="n">dock</span>
    <span class="n">framework</span> <span class="o">=</span> <span class="n">arduino</span>
    <span class="n">upload_speed</span> <span class="o">=</span> <span class="mi">115200</span>
    <span class="n">monitor_speed</span> <span class="o">=</span> <span class="mi">115200</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#main.cpp
</span>
    <span class="cp">#include</span> <span class="cpf">&lt;Arduino.h&gt;</span><span class="cp">
</span>
    <span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">)</span> <span class="p">{}</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Starting LED blink"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Blink!"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<h1 id="serial-communication-with-m1w">Serial communication with M1W</h1>
<p>Serial communication is crucial when trying to debug anything on Micro-controllers, so to make sure Serial communication is working properly I added the <em>Serial.println(‚ÄúBlink!‚Äù);</em> to the previous code. This however did not work out of the box, when trying to monitor the serial connection via <em>platformio device monitor</em> nothing would show up, and the LED would stop blinking?.<br />
After doing some research I found that the M1W possibly was entering boot/ISP mode, as if i was trying to flash new software to it.
This was easily fixed by disabling DTR and RTS by adding <em>monitor_rts = 0</em> and <em>monitor_dtr = 0</em> to <em>platformio.ini</em></p>
<h1 id="k210-vs-esp32-cpu-performance">K210 vs ESP32 CPU Performance</h1>
<p>The K210s CPU is clocked alot higher than that of the ESP32, so I was curios about what the performance difference could be?<br />
Especially with the K210 supporting <em>FP64</em> and having a much larger amount of builtin SRAM. 
For a quick benchmarking of the boards I did a simple and mostly theoretical benchmark, measuring the time it took to do 10
million addtions, multiplications and divisions, for <em>INT64</em> <em>Float32</em> and <em>Float64</em>, on a single core, then converting the results to million operations per second. Results can be seen below, where the K210 is on average 2.5x faster compared to the ESP32.<br />
<img src="/assets/K210vESP32-mops.svg" alt="Benchmark" style="width:100%;" />
With the K210 having FP64 implemented in hardware, and the ESP32 relying on software, it is disappointing to see that the FP64 performance isn‚Äôt much greater than that of the ESP32. This benchmark only focuses on raw performance that isn‚Äôt touching the IO.</p>
<h1 id="k210-vs-esp32-memory-performance">K210 vs ESP32 Memory Performance</h1>
<p>With the CPU performance of the K210 being impressive but still disappointing, I wanted to know how big a difference the larger SRAM capacity could have on performance.
The speed of both read and write was tested by allocating a certain buffer size and written and reading from it.</p>

<p><img src="/assets/K210vsESP32ReadWrite.svg" alt="Benchmarkmemory" style="width:100%;" /><br />
As can been seen on the image above, the K210 outperforms the ESP32 by a wide margin, with write speeds being consistent up to over 5MB, were the ESP32 falls of after 110KB, because everything over that requires the ESP32 to use external RAM.</p>
<h1 id="memory-impact-on-performance">Memory Impact on Performance</h1>
<p>The K210 has a much more fast memory to use, whick makes sense with the point of being able to do live image processing, requiring multiple frames to be kept in memory while processing. To measure the difference when running simple image manipulation tasks, square images between 128-1250 was allocated, filled with a gradiant and downscaled to quarter size. Excution times can be improved by using dedicated libraries and not relying on standard Arduino SDK.</p>

<p><img src="/assets/K210vESP32img.svg" alt="Benchmarkimg" style="width:100%;" /></p>
<h1 id="development-with-kendryte-standalone-sdk">Development with Kendryte-standalone-sdk</h1>
<p>To <em>Arduino framework</em> doesn‚Äôt have access to all the feature of the M1W, to get this the Kendryte-standalone-sdk is needed.
The sdk is used by default when initing a platformio project for the M1W, and the sdk can be found on github <a href="https://github.com/kendryte/kendryte-standalone-sdk/tree/develop">SDK Github Page</a> with some documentation here <a href="https://loboris.eu/sipeed/kendryte_standalone_programming_guide_v0.3.0.zh-CN.en.pdf">Documentation</a>.
Most funcitons seems documented, and a simple hello world example is included in the <em>src/</em> folder.
Running the program writes <em>‚Äúhello world‚Äù</em> from both cores, with output looking like this.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Core</span> <span class="mi">0</span> <span class="n">Hello</span> <span class="n">world</span>
<span class="n">Core</span> <span class="mi">1</span> <span class="n">Hello</span> <span class="n">world</span>
</code></pre></div></div>
<p>Now that the <em>Arduino framework</em> is no longer used, the program is written in standard c, and printin via serial is a simple as:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bsp.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sysctl.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Esben J√∏rgensen</name></author><category term="blog" /><summary type="html"><![CDATA[What is the Maix Dock M1W?]]></summary></entry></feed>